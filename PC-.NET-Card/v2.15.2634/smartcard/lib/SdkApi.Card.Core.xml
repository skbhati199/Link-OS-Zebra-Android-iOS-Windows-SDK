<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SdkApi.Card.Core</name>
    </assembly>
    <members>
        <member name="T:Zebra.Sdk.Card.Comm.CardConnectionReestablisher">
            <summary>
            Defines methods used to reestablish a connection to a printer that may have been closed or reset.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.CardConnectionReestablisher.ReestablishConnection(Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler)">
            <summary>
            Reestablishes a connection to a printer that may have been closed due to an event, like a reboot.
            </summary>
            <param name="handler">Handles recreating and opening a connection to a printer.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If the printer cannot be found.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection cannot be created or opened.</exception>
            <exception cref="T:System.TimeoutException">If a connection cannot be reestablished after a defined timeout.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy or if the connection cannot talk to the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.CardConnectionReestablisherBase.ReestablishConnection(Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.CardConnectionReestablisherBase.ReestablishConnection(Zebra.Sdk.Printer.PrinterReconnectionHandler)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.CardConnectionReestablisherBase.TimeoutCheck">
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceIO.Open">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceIO.Close">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceIO.Write(System.Byte[],System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceIO.Read(System.Byte[]@,System.Int32,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Comm.Internal.DeviceStream.ReadTimeout">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Comm.Internal.DeviceStream.TcpPort">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceStream.Open">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceStream.Close">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceStream.Write(System.Byte[],System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.DeviceStream.Read(System.Byte[]@,System.Int32,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.TcpCardConnectionReestablisher.ReestablishConnection(Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Comm.Internal.TcpCardConnectionReestablisher.WaitForPrinterToComeOnlineViaSnmpAndSubnetDiscovery(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.AlarmHandler">
            <summary>
            This interface is used to signal when an alarm condition has occurred.
            </summary>
            <remarks>
            Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for a list of error codes and descriptions
            </remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.AlarmHandler.AlarmEvent(Zebra.Sdk.Card.Containers.AlarmInfo)">
            <summary>
            Invoked when an alarm condition is detected.
            </summary>
            <param name="alarm">Instance containing information about the reported alarm condition.</param>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.AlarmInfo">
            <summary>
            Class holding information about a printer alarm or error condition.
            </summary>
            <remarks>
            Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for list of error codes and descriptions.
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.AlarmInfo.Value">
            <summary>
            Alarm or error code.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.AlarmInfo.Description">
            <summary>
            Alarm or error description.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.BarcodeData">
            <summary>
            Class for holding the barcode data returned from a barcode read job.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.BarcodeData.Type">
            <summary>
            The barcode symbology type.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.BarcodeData.Data">
            <summary>
            The data read from the barcode.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.BarcodeData.AlarmCode">
            <summary>
            Printer alarm code.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.CardCountInfo">
            <summary>
            Class for retrieving the printer's card count information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardCountInfo.CardsInRejectBin">
            <summary>
            Number of cards sent to the reject bin.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardCountInfo.CardsRejected">
            <summary>
            Number of cards rejected.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardCountInfo.TotalCards">
            <summary>
            Total number of cards.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardCountInfo.CardCounterInfo">
            <summary>
            Returns a Dictionary object containing all of the printer's card counters.
            </summary>
            <remarks>
            For ZMotif and ZC Series printers only.<br/>
            The returned card counter names and values will vary by printer model.<br/>
            <ul>
            <li>Key = card counter name.</li>
            <li>Value = card counter value.</li>
            </ul>
            </remarks>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.CardTypeInfo">
            <summary>
            Class for getting and/or setting card type information.
            </summary>
            <remarks>
            For ZMotif Series re-transfer printers only.
            </remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.CardTypeInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.ContactEncode">
            <summary>
            True if contact tag present.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.ContactlessEncode">
            <summary>
            True if contactless tag present.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.MagStripe">
            <summary>
            True if magnetic stripe present.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.Thickness">
            <summary>
            Card thickness (mils).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.Type">
            <summary>
            If custom card, specifies 0 - CUSTOM_CARD_1 or 1 - CUSTOM_CARD_2.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.Coercivity">
            <summary>
            Magnetic stripe coercivity type ("high" or "low").
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.Description">
            <summary>
            Card Description.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.PartNumber">
            <summary>
            Zebra part number for card.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.TransferTemps">
            <summary>
            Film transfer temperatures.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.TransferSpeeds">
            <summary>
            Film transfer speed.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.CardTypeInfo.LaminatorAdjustments">
            <summary>
            Laminator adjustment values.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.GraphicsInfo">
            <summary>
            Class for specifying the graphics information used during printing.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.Side">
            <summary>
            Card side to print on.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.PrintType">
            <summary>
            Type of graphics information (color, mono, etc.).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.XOffset">
            <summary>
            X-offset (pixels) from origin 0, 0.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.YOffset">
            <summary>
            Y-offset (pixels) from origin 0, 0.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.Opacity">
            <summary>
            Opacity value - meaningful only with multiple bitmaps of the same <see cref="P:Zebra.Sdk.Card.Containers.GraphicsInfo.PrintType"/>.
            </summary>
            <remarks>
            <ul>
            <li>0 = All pixels opaque, except "pure white" instances</li>
            <li>1 (default) = All pixels opaque, including "pure white" instances</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.FillColor">
            <summary>
            Background fill color.
            </summary>
            <remarks>
            <ul>
            <li>0 = All pixels off (white)</li>
            <li>1 = All pixels on, mono panel</li>
            <li>RGB = Hex values for color (0xFFFFFF = white)</li>
            <li>See <see cref="T:Zebra.Sdk.Card.Enumerations.FillType"/> for ZC Series printers.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.Overprint">
            <summary>
            Applies to UV <see cref="P:Zebra.Sdk.Card.Containers.GraphicsInfo.PrintType"/> only.
            </summary>
            <remarks>
            <ul><li>true = prints the UV panel to a fresh panel of transfer film</li></ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.Preheat">
            <summary>
            Sets the amount of baseline energy used on the non-printed (white areas) of the card.
            </summary>
            <remarks>
            Increasing the value from 0 will make the transition from non-printing
            (white) to printing (color or black) stronger.<br/>
            <ul><li>For ZMotif and ZC Series printers only.</li></ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.GraphicType">
            <summary>
            Type of <see cref="P:Zebra.Sdk.Card.Containers.GraphicsInfo.GraphicType"/>}.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.GraphicsInfo.GraphicData">
            <summary>
            Bitmap image data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.JobConfigInfo">
            <summary>
            Class for configuring a print job's settings.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.CardSource">
            <summary>
            Card source location.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.CardDestination">
            <summary>
            Card destination.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.CardType">
            <summary>
            Card type.
            </summary>
            <remarks>
            For ZMotif re-transfer printers only.
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.CardThickness">
            <summary>
            Thickness of cards (mil).
            </summary>
            <remarks>
            For ZMotif re-transfer printers only.
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.DataSource">
            <summary>
            The data source for the specified mag or barcode read operation.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobConfigInfo.DeleteAfter">
            <summary>
            Indicates whether all image data should be deleted following job completion.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.JobSideConfigInfo">
            <summary>
            Sets side configuration properties used during print jobs.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobSideConfigInfo.Orientation">
            <summary>
            Sets the orientation of the image.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobSideConfigInfo.Rotation">
            <summary>
            Sets the rotation of the image.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobSideConfigInfo.Sharpness">
            <summary>
            Sets the sharpness level of the image.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobSideConfigInfo.KMode">
            <summary>
            Sets the monochrome optimization type.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.JobStatus">
            <summary>
            Class for retrieving the printer's job history information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatus.ID">
            <summary>
            Job ID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatus.PrintStatus">
            <summary>
            Job print status.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.JobStatusInfo">
            <summary>
            Class for retrieving job status information for a specified job ID.
            </summary>
            <remarks>
            <ul><li>Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for a list of error codes and descriptions.</li></ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.ReadyForNextJob">
            <summary>
            Indicates whether the printer is ready to accept another job.
            </summary>
            <remarks>
            For ZMotif and ZC Series printers only.
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.PrintStatus">
            <summary>
            Status of job.
            </summary>
            <remarks>
            Example values: parsed, receive_ok, in_progress, cleaning_up, done_ok, done_error, cancelled_by_user, cancelled_by_error
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.CardPosition">
            <summary>
            Current card position.
            </summary>
            <remarks>
            For ZMotif and ZC Series printers only.<br/>
            Example values: not_in_printer, feeding, in_process, printing, mag_write, mag_retrace, mag_read, read_ein, smart_encode, ejecting_eject, laminate_insert, done_ok
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.AlarmInfo">
            <summary>
            Current printer alarm information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.ErrorInfo">
            <summary>
            Current printer error information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.CopiesCompleted">
            <summary>
            Number of copies completed.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.CopiesRequested">
            <summary>
            Number of copies requested.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.MagneticEncodingStatus">
            <summary>
            Magnetic encoding job status.
            </summary>
            <remarks>
            Example values: encoding, reading
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.ContactSmartCardStatus">
            <summary>
            Contact encoding job status.
            </summary>
            <remarks>
            <ul><li>Used to indicate when the card has reached the contact encoder ("at_station").</li></ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.JobStatusInfo.ContactlessSmartCardStatus">
            <summary>
            Contactless encoding job status.
            </summary>
            <remarks>
            <ul><li>Used to indicate when the card has reached the contactless encoder ("at_station").</li></ul>
            </remarks>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.LaminatorAdjustments">
            <summary>
            Class for getting/setting the laminator's adjustment parameters.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.LaminatorAdjustments.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorAdjustments.BottomTemp">
            <summary>
            Bottom laminate temperature offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorAdjustments.TopTemp">
            <summary>
            Top laminate temperature offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorAdjustments.Speed">
            <summary>
            Lamination speed.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.LaminatorCardCountInfo">
            <summary>
            Class for retrieving the laminator's card count information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorCardCountInfo.CardsLaminated">
            <summary>
            Number of cards that have been laminated.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorCardCountInfo.CardsProcessed">
            <summary>
            Number of cards that have been processed through the laminator.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.LaminatorInfo">
            <summary>
            Class for retrieving information about the laminator.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorInfo.SerialNumber">
            <summary>
            Serial number.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorInfo.FirmwareVersion">
            <summary>
            Firmware version.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.LaminatorInfo.MediaVersion">
            <summary>
            Media firmware version.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MagConfigInfo">
            <summary>
            Class for configuring a magnetic encoding job.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Side">
            <summary>
            Card side to magnetic encode (back or front).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Coercivity">
            <summary>
            Coercivity of magnetic card: (high or low)
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.EncodingType">
            <summary>
            Magnetic encoding type.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Track1Format">
            <summary>
            Track 1 data format (ASCII or HEX).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Track2Format">
            <summary>
            Track 2 data format (ASCII or HEX).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Track3Format">
            <summary>
            Track 3 data format (ASCII or HEX).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Verify">
            <summary>
            Indicates whether or not to verify that the data was encoded successfully.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagConfigInfo.Erase">
            <summary>
            Indicates whether or not to erase existing magnet data before enconding new data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MagneticEncoderInfo">
            <summary>
            Class for retrieving the printer's magnetic encoder configuration.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.MagneticEncoderInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagneticEncoderInfo.HeadType">
            <summary>
            The magnetic encoder type (ISO or JIS).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagneticEncoderInfo.StripeLocation">
            <summary>
            Location of the magnetic encoder (front or back).
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo">
            <summary>
            Class for getting/setting the magnetic encoder offset values.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo.startSentinel">
            <summary>
            Dictionary containing the magentic track start sentinel offset values for each track.
            </summary>
            <ul>
            <li>Key = track number <see cref="T:Zebra.Sdk.Card.Enumerations.TrackNumber"/></li>
            <li>Value = offset <see cref="T:Zebra.Sdk.Card.Containers.ParameterInfo"/></li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo.xOffset">
            <summary>
            Magnetic card x-offset value.
            </summary>
            <remarks>See <see cref="T:Zebra.Sdk.Card.Containers.ParameterInfo"/>.</remarks>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MagSentinel">
            <summary>
            Class for getting and/or setting the individual magnetic encoder track sentinel configurations.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagSentinel.DataFormat">
            <summary>
            Sentinel data format.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagSentinel.Start">
            <summary>
            Start sentinel character.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagSentinel.End">
            <summary>
            End sentinel character.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MagTrackData">
            <summary>
            Class for reading magnetic encoder track data.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagTrackData.Track1">
            <summary>
            Track 1 data.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagTrackData.Track2">
            <summary>
            Track 2 data.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MagTrackData.Track3">
            <summary>
            Track 3 data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MediaInfo">
            <summary>
            Class for retrieving information about the printer's installed media.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.Type">
            <summary>
            The media type.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.InitialSize">
            <summary>
            Initial media size.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.PanelsRemaining">
            <summary>
            Number of panels remaining.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.Description">
            <summary>
            Media description.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.OemCode">
            <summary>
            Media OEM code.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MediaInfo.PartNumber">
            <summary>
            Media part number.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.MemoryInfo">
            <summary>
            Class for getting the printer's available memory.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MemoryInfo.Flash">
            <summary>
            Flash available.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.MemoryInfo.Ram">
            <summary>
            RAM available.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.NetworkInfo">
            <summary>
            Class for getting/setting the printer's wired network configuration.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.MacAddress">
            <summary>
            MAC address.
            </summary>
            <remarks>Read only</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.Address">
            <summary>
            IP address.
            </summary>
            <remarks>If setting the value, you must also disable DHCP <see cref="P:Zebra.Sdk.Card.Containers.NetworkInfo.DhcpEnabled"/>.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.SubnetMask">
            <summary>
            Subnet mask.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.Gateway">
            <summary>
            Gateway.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.DnsName">
            <summary>
            DNS Name.
            </summary>
            <remarks>Read only for ZMotif Series 7, 8, and 9 printers.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.DhcpEnabled">
            <summary>
            True if DHCP is enabled.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.NetworkInfo.SnmpEnabled">
            <summary>
            True if SNMP is enabled.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.OcpDisplayInfo">
            <summary>
            Class for getting/setting the printer's OCP line data.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.OcpDisplayInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpDisplayInfo.LineData">
            <summary>
            Dictionary containing the individual OCP line data.
            </summary>
            <remarks>
            <ul>
            <li>Key = OCP line number (0-6)</li>
            <li>Value = instance of <see cref="T:Zebra.Sdk.Card.Containers.OcpLine"/></li>
            </ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpDisplayInfo.Lock">
            <summary>
            Indicates whether to lock the OCP display.
            </summary>
            <remarks>For ZMotif Series printers only.</remarks>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.OcpLine">
            <summary>
            Class for getting/setting the printer's OCP line data.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpLine.Message">
            <summary>
            Line message to display.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpLine.Underline">
            <summary>
            Indicates whether the <c>message</c> should be underlined.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpLine.Reverse">
            <summary>
            Indicates whether the <c>message</c> should be reversed.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpLine.Toggle">
            <summary>
            Indicates whether the <c>message</c> should toggle.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpLine.DoubleSize">
            <summary>
            Indicates whether the <code>message</code> should be displayed as double height characters.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.OcpSettings">
            <summary>
            Class for getting/setting the printer's Operator Control Panel (OCP) configuration.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpSettings.Contrast">
            <summary>
            The OCP contrast.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.OcpSettings.Language">
            <summary>
            The OCP language.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.ParameterInfo">
            <summary>
            Class for retrieving information about a setting's value and range.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ParameterInfo.MaximumValue">
            <summary>
            Maximum allowed value.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ParameterInfo.MinimumValue">
            <summary>
            Minimum allowed value.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ParameterInfo.Value">
            <summary>
            Parameter's value.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.PrinterInfo">
            <summary>
            Class for retrieving information about the printer.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.Vendor">
            <summary>
            Vendor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.Model">
            <summary>
            Model.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.SerialNumber">
            <summary>
            Serial number.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.MacAddress">
            <summary>
            MAC address.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.PrintheadSerialNumber">
            <summary>
            Printhead serial number.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.OemCode">
            <summary>
            OEM code.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.FirmwareVersion">
            <summary>
            Main control board firmware version.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.MediaVersion">
            <summary>
            Media control board firmware version.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.HeaterVersion">
            <summary>
            Heater control board firmware version.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.SensorVersion">
            <summary>
            Sensor control board firmware version.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.FeederVersion">
            <summary>
            Feeder user interface firmware version.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.FlipperVersion">
            <summary>
            Flipper control board firmware version.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.OptionsVersion">
            <summary>
            Options control board firmware version.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterInfo.ZMotifVersion">
            <summary>
            ZMotif version.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.PrinterStatusInfo">
            <summary>
            Class for getting the printer's current status information.
            </summary>
            <remarks>
            Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for a list of error codes and descriptions.
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.Status">
            <summary>
            Current printer status.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.ErrorInfo">
            <summary>
            Current printer error information.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobsPending">
            <summary>
            Number of pending jobs.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobsActive">
            <summary>
            Number of active jobs.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobsComplete">
            <summary>
            Number of jobs completed.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobErrors">
            <summary>
            Number of job errors.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobsCancelled">
            <summary>
            Number of jobs cancelled.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.JobsTotal">
            <summary>
            Total number of jobs
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.NextJobId">
            <summary>
            Next job action ID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.PrinterStatusInfo.AlarmInfo">
            <summary>
            Current printer alarm information.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.ReservationInfo">
            <summary>
            Class for getting the printer's reservation information.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ReservationInfo.Token">
            <summary>
            Reservation token.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ReservationInfo.SessionGranted">
            <summary>
            True if the requested reservation has been granted.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.ReservationInfo.InSession">
            <summary>
            True if the printer is currently in session.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.TemplateJob">
            <summary>
            Class holding data to be rendered during card template printing.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.JobInfo">
            <summary>
            The job configuration.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.JobSideInfo">
            <summary>
            Side specific job configuration information.
            </summary>
            <remarks>
            <ul>
            <li>Key = Card side. <see cref="T:Zebra.Sdk.Card.Enumerations.CardSide"/></li>
            <li>Value = Job configuration info. <see cref="T:Zebra.Sdk.Card.Containers.JobSideConfigInfo"/></li>
            </ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.GraphicsData">
            <summary>
            A <c>List</c> of GraphicsInfo instances containing details of the images to be printed.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.MagInfo">
            <summary>
            Contains configuration for a magnetic encoding job.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.MagData">
            <summary>
            Contains magnetic track data.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TemplateJob.ZebraCardGraphics">
            <summary>
            A <c>ZebraGraphicsI</c> instance for all Zebra card printer graphics-related tasks.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.TransferSpeeds">
            <summary>
            Class for retrieving card type specific transfer speed offsets for ZMotif re-transfer printers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.TransferSpeeds.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.InputDouble">
            <summary>
            Double-sided input speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.InputSingle">
            <summary>
            Single-sided input speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.InputDoubleUV">
            <summary>
            Double-sided UV input speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.InputSingleUV">
            <summary>
            Single-sided UV input speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.OutputDouble">
            <summary>
            Double-sided output speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.OutputSingle">
            <summary>
            Single-sided output speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.OutputDoubleUV">
            <summary>
            Double-sided UV output speed offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferSpeeds.OutputSingleUV">
            <summary>
            Single-sided UV output speed offset.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.TransferTemps">
            <summary>
            Class for retrieving card type specific transfer temperature offsets for ZMotif Series re-transfer printers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Containers.TransferTemps.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferTemps.TopSingle">
            <summary>
            Top single-sided temperature offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferTemps.BottomSingle">
            <summary>
            Bottom single-sided temperature offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferTemps.TopDouble">
            <summary> 
            Top double-sided temperature offset.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.TransferTemps.BottomDouble">
            <summary>
            Bottom double-sided temperature offset.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo">
            <summary>
            Class for retrieving information about the printer's discovered wireless access points.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Selected">
            <summary>
            Indicates whether this access point is currently selected.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Infrastructure">
            <summary>
            Indicates if this access point is configured for infrastructure mode.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Channel">
            <summary>
            Wireless channel.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Privacy">
            <summary>
            Privacy mode.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.SignalStrength">
            <summary>
            Wireless signal strength.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.MaxDataRate">
            <summary>
            Maximum supported data rate.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.SSID">
            <summary>
            Wireless SSID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.BSSID">
            <summary>
            Wireless BSSID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Security">
            <summary>
            Wireless security mode.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessAccessPointInfo.Encryption">
            <summary>
            Wireless encryption mode.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Containers.WirelessNetworkInfo">
            <summary>
            Class for getting/setting the printer's wireless network configuration.
            </summary>
            <remarks>For ZMotif Series printers only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.DhcpEnabled">
            <summary>
            Indicates whether DHCP is enabled.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.RadioEnabled">
            <summary>
            Indicates if the printer's wireless radio is enabled.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.SnmpEnabled">
            <summary>
            Indicates whether SNMP is enabled.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.Channel">
            <summary>
            Channel number.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.Gateway">
            <summary>
            Gateway.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.Address">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.MacAddress">
            <summary>
            MAC address.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.SSID">
            <summary>
            SSID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.BSSID">
            <summary>
            BSSID.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.SubnetMask">
            <summary>
            Subnet mask.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.WirelessKey">
            <summary>
            Wireless key (write-only).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.CryptoType">
            <summary>
            Wireless cryptographic security type.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Containers.WirelessNetworkInfo.SecurityType">
            <summary>
            Wireless security type.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Device.DeviceUtil">
            <summary>
            Defines functions used for printer related operations.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.CheckForAlarm">
            <summary>
            Gets the printer's current alarm code.
            </summary>
            <returns>Printer alarm code.</returns>
            <ul><li>Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for the list of error codes and descriptions</li></ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.ClearOcpDisplay(System.Boolean)">
            <summary>
            Clears any custom line data from the OCP and returns it to the main view.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="lockOcp">True to lock the printer's OCP display.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while clearing the OCP display.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetCardCount">
            <summary>
            Returns the printer's total card count values.
            </summary>
            <returns>A <c>CardCountInfo</c> instance populated with the printer's card count information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the card count.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetMagneticEncoderConfiguration">
            <summary>
            Returns the printer's magnetic encoder configuration.
            </summary>
            <returns>A <c>MagneticEncoderInfo</c> instance populated with the printer's installed magnetic encoder configuration.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic encoder configuration.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetOcpDisplay">
            <summary>
            Returns the line data currently displayed on the printer's OCP.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <returns>An <c>OcpDisplayInfo</c> instance populated with the printer's OCP line data.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the OCP display information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetPrinterInformation">
            <summary>
            Returns the printer's specific device information.
            </summary>
            <returns>A <c>PrinterInfo</c> instance populated with the printer specific information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetPrinterStatus">
            <summary>
            Returns the printer's current status information.
            </summary>
            <returns>A <c>PrinterStatusInfo</c> instance populated with the printer's status information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer's status information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetMediaInformation">
            <summary>
            Returns a List of the printer's installed media information.
            </summary>
            <returns>A <c>List</c> of <c>MediaInfo</c> instance/s populated with the printer's installed media information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the installed media information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetSensorStates">
            <summary>
            Returns the printer's sensor states.
            </summary>
            <returns>A <c>Dictionary</c> containing the printer's various sensor names and states.</returns>
            <ul>
            <li>Key = sensor name</li>
            <li>Value = sensor state</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the sensor states.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetSensorValues">
            <summary>
            Returns the printer's sensor values.
            </summary>
            <returns>A <c>Dictionary</c> containing the printer's various sensor names and values.</returns>
            <ul>
            <li>Key = sensor name</li>
            <li>Value = sensor value</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the sensor values.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetSmartCardConfigurations">
            <summary>
            Returns the printer's smart card encoder configurations.
            </summary>
            <returns>A <c>Dictionary</c> containing the encoder types and their serial numbers.</returns>
            <ul>
            <li>Key = type</li>
            <li>Value = serial number</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the smartcard configuration.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.RegisterAlarmHandler(Zebra.Sdk.Card.Containers.AlarmHandler)">
            <summary>
            Registers a callback routine for asynchronous reporting of printer alarm conditions.
            </summary>
            <param name="alarmHandler">An <c>AlarmHandler</c> callback instance for printer alarm conditions.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.Reset">
            <summary>
            Resets the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.SetOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo)">
            <summary>
            Displays the specified line data on the printer's OCP.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="ocpDisplay">Instance populated with the OCP line data to be displayed.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while setting the OCP display information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.UpdateFirmware(System.String)">
            <summary>
            Updates the printers firmware.
            </summary>
            <param name="firmwareFilePath">The full path to the firmware file.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the <c>firmwareFilePath</c> is not found.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is a printer error or <c>firmwareFilePath</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.UpdateFirmware(System.String,Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler)">
            <summary>
            Updates the printers firmware.
            </summary>
            <param name="firmwareFilePath">The full path to the firmware file.</param>
            <param name="handler">A callback for firmware status updates.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If attempting to reconnect fails.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the <c>firmwareFilePath</c> is not found.</exception>
            <exception cref="T:System.TimeoutException">If the firmware update times out.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is a printer error or <c>firmwareFilePath</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.HasMagneticEncoder">
            <summary>
            Returns true if the printer includes a magnetic encoder.
            </summary>
            <returns>True if the printer has a magnetic encoder.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer's configuration information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.GetPrintCapability">
            <summary>
            Returns the transfer type of the printer.
            </summary>
            <returns>The transfer type of the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer's configuration information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.HasLaminator">
            <summary>
            Returns true if the printer includes a laminator.
            </summary>
            <returns>True if the printer configuration includes a laminator.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer's configuration information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Device.DeviceUtil.HasSmartCardEncoder">
            <summary>
            Returns true if the printer includes a smart card encoder.
            </summary>
            <returns>True if printer configuration includes a smart card encoder.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer's configuration information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CalibrationTable">
            <summary>
            Specifies a specific calibration table contained in the printer.
            </summary>
            <remarks>For ZMotif Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LUT1Installed">
            <summary>
            Name of the installed Lut 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LUT2Installed">
            <summary>
            Name of the installed Lut 2.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LutsInstalled">
            <summary>
            Name of the installed Lut 3.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LUT1Default">
            <summary>
            Name of the default Lut 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LUT2Default">
            <summary>
            Name of the default Lut 2.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CalibrationTable.LUTsDefault">
            <summary>
            Name of the default Lut 3.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CapabilitiesType">
            <summary>
            Specifies the type of printer capabilities to request.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CapabilitiesType.General">
            <summary>
            General capabilities for the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CapabilitiesType.Media">
            <summary>
            Media capabilities for the printer.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CardDestination">
            <summary>
            Specifies the destination of the card following job completion.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.Eject">
            <summary>
            Sends the card to the eject bin.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.Reject">
            <summary>
            Sends the card to the reject bin.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.Hold">
            <summary>
            Holds the card inside the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.Feeder">
            <summary>
            Returns the card to the feeder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.LaminatorTop">
            <summary>
            Sends the card to the laminator for top lamination.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.LaminatorBottom">
            <summary>
            Sends the card to the laminator for bottom lamination.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.LaminatorBoth">
            <summary>
            Sends the card to the laminator for top and bottom lamination.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.LaminatorNone">
            <summary>
            Sends the card to the laminator for no lamination.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardDestination.LaminatorAny">
            <summary>
            Sends the card to the laminator regardless of installed laminate.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CardSide">
            <summary>
            Specifies the card side to be used for the desired operation.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSide.Front">
            <summary>
            Front side of the card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSide.Back">
            <summary>
            Back side of the card.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CardSource">
            <summary>
            Specifies the card source location.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSource.ATM">
            <summary>
            ATM card feeder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSource.Feeder">
            <summary>
            Main card feeder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSource.Internal">
            <summary>
            Internal to the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CardSource.AutoDetect">
            <summary>
            Main feeder or ATM.<br/>
            For ZMotif Series 7 and ZC Series printers only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CleaningPath">
            <summary>
            Specifies a cleaning path for the cleaning operation.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CleaningPath.ATM">
            <summary>
            ATM card feeder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CleaningPath.Feed">
            <summary>
            Main card feeder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CleaningPath.LaminatorCard">
            <summary>
            Laminator card path.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CleaningPath.LaminatorRollers">
            <summary>
            Laminator rollers.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CleaningPath.Transfer">
            <summary>
            Transfer station.<br/>
            For ZMotif Series re-transfer printers only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CoercivityType">
            <summary>
            Specifies the coercivity type for magnetic encoding.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CoercivityType.High">
            <summary>
            High coercivity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CoercivityType.Low">
            <summary>
            Low coercivity.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.CustomCard">
            <summary>
            Specifies the custom card type to use.
            </summary>
            <remarks>For ZMotif Series re-transfer printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CustomCard.Custom1">
            <summary>
            Custom card 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.CustomCard.Custom2">
            <summary>
            Custom card 2.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.DataCharParity">
            <summary>
            Specifies the data character parity for magnetic encoding.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataCharParity.Odd">
            <summary>
            Odd parity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataCharParity.Even">
            <summary>
            Even parity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataCharParity.None">
            <summary>
            Parity not specified.<br/>
            For ZC Series printers only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.DataFormat">
            <summary>
            Specifies the data format for magnetic encoding.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataFormat.Ascii">
            <summary>
            ASCII data.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataFormat.Hex">
            <summary>
            Hexadecimal data.<br/><br/>
            Expressed as a 2-character ASCII hex sequence.<br/>
            Example: The word 'Zebra' would be expressed as "5A65627261" in <c>Hex</c>.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.DataSource">
            <summary>
            Specifies the data source for the specified magnetic or barcode read operation.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataSource.None">
            <summary>
            No data source.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataSource.Track1">
            <summary>
            Track 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataSource.Track2">
            <summary>
            Track 2.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataSource.Track3">
            <summary>
            Track 3.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.DataSource.Barcode">
            <summary>
            Barcode.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.ErrorControlLevel">
            <summary>
            Specifies the printer's error control level.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ErrorControlLevel.EC_High">
            <summary>
            Specifies an internal error handling mode of high.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ErrorControlLevel.EC_Medium">
            <summary>
            Specifies an internal error handling mode of medium.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ErrorControlLevel.EC_None">
            <summary>
            Specifies no internal error handling.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.FillType">
            <summary>
            Specifies the full coverage print type for Overlay 'O' and Laminate 'L' ribbon panels.
            </summary>
            <remarks>
            <ul>
            <li>For ZC Series printers only.</li>
            <li>Used with a <see cref="P:Zebra.Sdk.Card.Containers.GraphicsInfo.PrintType"/> of <see cref="F:Zebra.Sdk.Card.Enumerations.PrintType.Overlay"/> and <see cref="P:Zebra.Sdk.Card.Containers.GraphicsInfo.FillColor"/>.</li>
            </ul>
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.None">
            <summary>
            Generates no fill.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.Fill">
            <summary>
            Generates rectangular fill.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.FillMag">
            <summary>
            Generates rectangular fill with non-printing block inserted in fill to prevent printing over the magnetic stripe.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.FillSmartCard">
            <summary>
            Generates rectangular fill with non-printing block inserted in fill to prevent printing over the smart card contacts.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.FillRounded">
            <summary>
            Generates rectangular fill with rounded corners.
            </summary>
            <remarks>Round pattern and size reduction specified in StdPrnProfile.json.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.FillRoundedMag">
            <summary>
            Generates rectangular fill with rounded corners with non-printing block inserted in fill to prevent printing over the magnetic stripe.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.FillType.FillRoundedSmartCard">
            <summary>
            Generates rectangular fill with rounded corners with non-printing block inserted in fill to prevent printing over the smart card contacts.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.GraphicType">
            <summary>
            Specifies the type of image data.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.GraphicType.BMP">
            <summary>
            Bitmap image.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.GraphicType.NA">
            <summary>
            No image data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.ImageRotation">
            <summary>
            Specifies the rotation of the image data.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ImageRotation.RotateNone">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ImageRotation.Rotate180">
            <summary>
            180 degree rotation.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Enumerations.Internal.EnumExtensions.GetDescription(System.Enum)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Enumerations.Internal.EnumExtensions.GetDescriptions(System.Type)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Enumerations.Internal.EnumExtensions.GetValueFromDescription``1(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.IPVersion">
            <summary>
            Specifies the Internet Protocol to use during device discovery.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.IPVersion.IPv4">
            <summary>
            Internet Protocol version 4.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.IPVersion.IPv6">
            <summary>
            Internet Protocol version 6.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.KOptimizationType">
            <summary>
            Specifies the monochrome optimization mode.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.KOptimizationType.Text">
            <summary>
            Optimize for text.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.KOptimizationType.Barcode">
            <summary>
            Optimize for barcode.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.KOptimizationType.Mixed">
            <summary>
            Optimize for photographs and text.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.KOptimizationType.Photo">
            <summary>
            Optimize for photographs.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType">
            <summary>
            Specifies the laminator offset type to get or set.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.BottomTemperature">
            <summary>
            Bottom laminate temperature offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.BottomX">
            <summary>
            Bottom laminate x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.CoarseX">
            <summary>
            Coarse x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.LaminationSpeed">
            <summary>
            Lamination speed offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.PassThruSpeed">
            <summary>
            Pass-thru speed offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.PatchLength">
            <summary>
            Laminate patch length offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.TopTemperature">
            <summary>
            Top laminate temperature offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LaminatorOffsetType.TopX">
            <summary>
            Top laminate x-offset.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.LogType">
            <summary>
            Available log types.
            </summary>
            <remarks>For ZMotif and ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LogType.Errors">
            <summary>
            Error log.<br/>
            Note: Cannot be cleared.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LogType.CleanEvents">
            <summary>
            Clean events log.<br/>
            Note: Cannot be cleared.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LogType.Service">
            <summary>
            Service log.<br/>
            Note: Cannot be cleared.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.LogType.Events">
            <summary>
            General events log.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.MagEncoderType">
            <summary>
            The type of magnetic encoding supported.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncoderType.None">
            <summary>
            No magnetic encoder available.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncoderType.ISO">
            <summary>
            ISO data encoding.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.MagEncodingType">
            <summary>
            Specifies the type of magnetic encoding to perform.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncodingType.ISO">
            <summary>
            ISO encoding with track data validation.<br/>
            Magnetic encoding settings automatically configured for 'ISO/IATA' encoding.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncodingType.AAMVA">
            <summary>
            AAMVA encoding with track data validation.<br/>
            Magnetic encoding settings automatically configured for 'AAMVA' encoding.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncodingType.Custom">
            <summary>
            Custom encoding without track data validation.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MagEncodingType.Binary">
            <summary>
            Binary encoding without track data validation.<br/><br/>
            The only magnetic encoding setting that will be applied is the density setting <see cref="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagTrackDensity(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})"/>.<br/>
            All other magnetic encoding settings (parity, sentinels, bits per character, etc.) are ignored.<br/><br/>
            The <c>Binary</c> data provided for encoding is interpreted as a literal bitstream to be encoded, with the LSbit of each byte written out first. 
            When the data is in <see cref="F:Zebra.Sdk.Card.Enumerations.DataFormat.Ascii"/> format, each character is treated as a 8-bit integer. In <see cref="F:Zebra.Sdk.Card.Enumerations.DataFormat.Hex"/> format, 
            each 2-character (2 digit) ASCII hex digit pair is converted to an 8-bit integer and treated as such. Each 8-bit value is encoded in the order it 
            was provided in the data stream, in LSbit to MSbit order.<br/><br/>
            Example: B1C2E3 (<see cref="F:Zebra.Sdk.Card.Enumerations.DataFormat.Hex"/>) would be encoded as:<br/>
            10001101	    01000011	    11000111<br/>
            0xB1 bit 0->7   0xC2 bit 0->7	0xE3 bit 0->7
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.MediaType">
            <summary>
            Specifies the type of media.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MediaType.Ribbon">
            <summary>
            Ribbon.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MediaType.Film">
            <summary>
            Film.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MediaType.TopLaminate">
            <summary>
            Top laminate.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.MediaType.BottomLaminate">
            <summary>
            Bottom laminate.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.OcpLanguage">
            <summary>
            Specifies the OCP language.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.English">
            <summary>
            Display text in English.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.French">
            <summary>
            Display text in French.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Spanish">
            <summary>
            Display text in Spanish.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.German">
            <summary>
            Display text in German.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Portuguese">
            <summary>
            Display text in Portuguese.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Italian">
            <summary>
            Display text in Italian.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Polish">
            <summary>
            Display text in Polish.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Russian">
            <summary>
            Display text in Russian.<br/>
            For ZC Series printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Chinese">
            <summary>
            Display text in Chinese.<br/>
            For ZC Series printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OcpLanguage.Arabic">
            <summary>
            Display text in Arabic.<br/>
            For ZC Series printers only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.OrientationType">
            <summary>
            Specifies the orientation of the image.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OrientationType.Portrait">
            <summary>
            Portrait mode.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.OrientationType.Landscape">
            <summary>
            Landscape mode.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.PanelType">
            <summary>
            Specifies a specific panel on the card ribbon.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Cyan">
            <summary>
            Cyan panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Helper">
            <summary>
            Helper panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Inhibit">
            <summary>
            Inhibit panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.KDye">
            <summary>
            Monochrome panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.KResinBack">
            <summary>
            Back monochrome panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.KResinFront">
            <summary>
            Front monochrome panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Magenta">
            <summary>
            Magenta panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Overlay">
            <summary>
            Overlay panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.UVBack">
            <summary>
            Back UV panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.UVFront">
            <summary>
            Front UV panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.XResin">
            <summary>
            Secondary panel.<br/>
            For ZMotif and ZC Series printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PanelType.Yellow">
            <summary>
            Yellow panel.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.PrinterType">
            <summary>
            Specifies the card printer model type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrinterType.ZMOTIF">
            <summary>
            ZMotif Series card printer.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.PrintOptimizationMode">
            <summary>
            Specifies the print optimization mode.
            </summary>
            <remarks>For ZMotif Series 9 printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintOptimizationMode.Quality">
            <summary>
            Optimize for quality.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintOptimizationMode.Speed">
            <summary>
            Optimize for speed.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.PrintType">
            <summary>
            Specifies the type of print to be performed for the given image data.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.Color">
            <summary>
            24bpp image that will be printed on the yellow, magenta, and cyan ribbon panels.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.MonoUV">
            <summary>
            1bpp image that will be printed on the UV ribbon panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.MonoK">
            <summary>
            1bpp image that will be printed on a monochrome ribbon panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.WhiteResin">
            <summary>
            1bpp image that will be printed on the white resin (Wr) ribbon panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.Overlay">
            <summary>
            1bpp image to be printed on the overlay (O) or laminate (L) ribbon panel.<br/>
            PrintType.Overlay used in conjunction with GraphicType.NA will produce full overlay coverage.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.GrayUV">
            <summary>
            8bpp image that will be printed on the UV ribbon panel.<br/>
            For ZMotif Series printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.GrayDye">
            <summary>
            8bpp image that will be printed on a monochrome ribbon panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.Inhibit">
            <summary>
            1bpp image that masks out an area to 'inhibit' printing.<br/>
            For ZMotif Series 8 and 9 only.<br/>
            Specified area will not be printed on.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.Helper">
            <summary>
            Specifies that the ribbon helper (H) or dye receptive (D) panel should be used when printing the job.<br/>
            Must be used in conjunction with GraphicType.NA.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.GrayGhost">
            <summary>
            8bpp image that will be printed on the ghost panel.<br/>
            For ZMotif Series 7 printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.MonoGhost">
            <summary>
            1bpp image that will be printed on the ghost panel.<br/>
            For ZMotif Series 7 printers only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.SilverResin">
            <summary>
            1bpp image that will be printed on the silver resin (Sr) ribbon panel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.PrintType.Pearl">
            <summary>
            1bpp image that will be printed on the pearlescent (P) ribbon panel.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.ReservationType">
            <summary>
            Specifies the type of reservation to request.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ReservationType.ImmediateSession">
            <summary>
            Immediate reservation request.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.ReservationType.PendingSession">
            <summary>
            Pending reservation request.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.SharpeningLevel">
            <summary>
            Specifies the level of sharpening to apply to the image data.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SharpeningLevel.Off">
            <summary>
            No sharpening.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SharpeningLevel.Normal">
            <summary>
            Normal sharpening.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SharpeningLevel.High">
            <summary>
            High sharpening.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SharpeningLevel.Low">
            <summary>
            Low sharpening.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.SmartCardType">
            <summary>
            Specifies the type of smart card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SmartCardType.None">
            <summary>
            No smart card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SmartCardType.Contact">
            <summary>
            Contact smart card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SmartCardType.Contactless">
            <summary>
            Contactless smart card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SmartCardType.Contactless_UHF">
            <summary>
            Contactless ultra high frequency smart card.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.SmartCardType.Other">
            <summary>
            Third party contactless encoder.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.Timeout">
            <summary>
            Specifies the amount of time before the printer enters standby mode.
            </summary>
            <remarks>ZMotif series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.Timeout.Never">
            <summary>
            Never enter standby mode.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.Timeout.ThirtyMinutes">
            <summary>
            After thirty minutes of inactivity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.Timeout.OneHour">
            <summary>
            After one hour of inactivity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.Timeout.TwoHours">
            <summary>
            After two hours of inactivity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.Timeout.FourHours">
            <summary>
            After four hours of inactivity.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.TrackNumber">
            <summary>
            Specifies the track of the magnetic card to be written to/read from.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TrackNumber.Track1">
            <summary>
            Magnetic card track 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TrackNumber.Track2">
            <summary>
            Magnetic card track 2.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TrackNumber.Track3">
            <summary>
            Magnetic card track 3.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.TransferTemperatureType">
            <summary>
            Specifies a particular re-transfer temperature sensor.
            </summary>
            <remarks>For ZMotif Series re-transfer printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferTemperatureType.BottomDouble">
            <summary>
            Bottom roller double side printing offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferTemperatureType.BottomSingle">
            <summary>
            Bottom roller single side printing offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferTemperatureType.TopDouble">
            <summary>
            Top roller double side printing offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferTemperatureType.TopSingle">
            <summary>
            Top roller single side printing offset.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.TransferType">
            <summary>
            Specifies the transfer type of the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferType.SingleSided">
            <summary>
            Single sided printing.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.TransferType.DualSided">
            <summary>
            Dual sided printing.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.WirelessCryptoType">
            <summary>
            Specifies the wireless cryptographic security type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessCryptoType.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessCryptoType.RC4">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessCryptoType.TKIP">
            <summary>
            TKIP.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessCryptoType.CCMP">
            <summary>
            CCMP.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Enumerations.WirelessSecurityType">
            <summary>
            Specifies the wireless security type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessSecurityType.OPEN">
            <summary>
            Open.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessSecurityType.WEP40">
            <summary>
            WEP40.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessSecurityType.WEP104">
            <summary>
            WEP104.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessSecurityType.WPA">
            <summary>
            WPA.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Enumerations.WirelessSecurityType.WPA2">
            <summary>
            WPA2.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Errors.ZebraCardErrors">
            <summary>
            Card printer error code values.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_NO_ERROR">
            <summary>
            System: No error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DEVICE_NOT_OPEN">
            <summary>
            SDK: Device not open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DEVICE_ALREADY_OPEN">
            <summary>
            SDK: Device already open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DEVICE_NOT_AVAILABLE">
            <summary>
            SDK: Device not available
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DEVICE_NOT_RESPONDING">
            <summary>
            SDK: Device not responding
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_CMD_SIGNATURE">
            <summary>
            SDK: Invalid ZMC response signature
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_CMD_ECHO">
            <summary>
            SDK: Bad ZMC command echo
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INSUFFICIENT_DATA_RCVD">
            <summary>
            SDK: Insufficient data received from device
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_ARGUMENT">
            <summary>
            SDK: Invalid argument
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_XML_ELEMENT_NOT_FOUND">
            <summary>
            SDK: Path to XML element not found
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_XML_PARSE_ERROR">
            <summary>
            SDK: XML parse error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_DATA_STRUCTURE">
            <summary>
            SDK: Empty/Invalid Data structure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_BUFFER_OVERFLOW">
            <summary>
            SDK: Buffer overflow
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_SMARTCARD_ENCODER_NOT_AVAILABLE">
            <summary>
            SDK: Smartcard encoder not available
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_ENCRYPTION_ERROR">
            <summary>
            SDK: Encryption error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_JOB_STATUS_ERROR">
            <summary>
            SDK: Job status error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_TRANSFER_TYPE">
            <summary>
            SDK: Dual sided printing not supported
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_MUTEX_ERROR">
            <summary>
            SDK: Unable to obtain exclusive access to device
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DEVICE_IN_SESSION">
            <summary>
            SDK: Device in session with another host
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_DEVICE_TYPE">
            <summary>
            SDK: Invalid device for requested operation
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_PASSPHRASE_OR_KEY_REQUIRED">
            <summary>
            SDK: Passphrase or security key required for requested operation
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_MEMORY_ALLOC_ERROR">
            <summary>
            SDK: Memory allocation error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_NO_DEVICES_FOUND">
            <summary>
            SDK: No devices found
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_DISCONNECT_ERROR">
            <summary>
            SDK: Disconnect error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_WIFI_NOT_AVAILABLE">
            <summary>
            SDK: Wi-Fi not available
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_MEDIA">
            <summary>
            SDK: Invalid media for requested operation
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_OPERATION_TIMEOUT">
            <summary>
            SDK: Requested operation timed out
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_WRITE_DATA_ERROR">
            <summary>
            SDK: Write data error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_INVALID_OPERATION">
            <summary>
            SDK: Requested operation not supported
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_BARCODE_READER_NOT_AVAILABLE">
            <summary>
            SDK: Barcode reader is not available
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SDK_UNEXPECTED_ERROR">
            <summary>
            SDK: Unexpected error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_POWERING_UP">
            <summary>
            System: Printer powering up
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_BOOT_INTEGRITY_ERROR">
            <summary>
            System: Boot region integrity error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_PROGRAM_INTEGRITY_ERROR">
            <summary>
            System: Program region integrity error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_WATCHDOG_TIMER_ERROR">
            <summary>
            System: Watchdog timer error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_INCOMPATIBLE_FIRMWARE_UPGRADE">
            <summary>
            System: Incompatible firmware upgrade attempted
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_EP_DIAG_MODE_ERROR">
            <summary>
            System: EP diagnostic mode error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_FIRMWARE_UPGRADE_ERROR">
            <summary>
            System: Firmware upgrade failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_CRITICAL_ERROR">
            <summary>
            System: Critical error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_INTERTASK_MESSAGE_ERROR">
            <summary>
            System: Intertask message error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_DUPLEX_UPGRADE_ERROR">
            <summary>
            System: Duplex upgrade error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_INVALID_HW_CONFIG_ERROR">
            <summary>
            System: Invalid hardware configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SYSTEM_AUTHENTICATION_ERROR">
            <summary>
            System: MLB authentication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_INVALID_CMD">
            <summary>
            ZMJ: Invalid command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_CMD_PROC_ERROR">
            <summary>
            ZMJ: Command processing error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_JOB_CNTRL_PARSE_ERROR">
            <summary>
            ZMJ: Job Control XML parse error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_JOB_ALREADY_OPEN">
            <summary>
            ZMJ: Job already open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_INVALID_JOB_ID">
            <summary>
            ZMJ: Invalid job ID
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_INVALID_ZMOTIF_VERSION">
            <summary>
            ZMJ: Invalid ZMOTIF version
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_COPIES_OUT_OF_RANGE">
            <summary>
            ZMJ: Number of requested copies out-of-range
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_MISSING_CMD_ID">
            <summary>
            ZMJ: Command identifier 'ZBR1' not found
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_NO_DATA_RCVD">
            <summary>
            ZMJ: No XML data received
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_NO_JOB_TYPE">
            <summary>
            ZMJ: No job type received
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_UNKNOWN_JOB_TYPE">
            <summary>
            ZMJ: Unknown job type received
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_DECRYPTION_ERROR">
            <summary>
            ZMJ: Data decryption error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_MAG_ENCODER_NOT_AVAILABLE">
            <summary>
            ZMJ: No magnetic encoder installed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_BARCODE_READER_NOT_AVAILABLE">
            <summary>
            ZMJ: No barcode reader installed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMJ_NO_MATCHING_ENCODER">
            <summary>
            ZMJ: No matching encoder type
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_IMAGE_TO_PRINT_AREA_ERROR">
            <summary>
            Imaging: Image to print area error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_PRINT_TO_MEDIA_AREA_ERROR">
            <summary>
            Imaging: Print to media area error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_FONT_RENDER_ERROR">
            <summary>
            Imaging: Font render error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_DRAWING_RENDER_ERROR">
            <summary>
            Imaging: Drawing render error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_INVALID_IMAGE_DATA">
            <summary>
            Imaging: Invalid image processing data
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_RECEIVE_IMAGE_DATA_ERROR">
            <summary>
            Imaging: Error receiving IPD
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_JOB_SCHEDULER_ERROR">
            <summary>
            Imaging: Error sending IPD to job scheduler
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_INCOMPLETE_IMAGE_DATA_RCVD">
            <summary>
            Imaging: Received incomplete image data
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_IMAGE_PROCESSING_ABORTED">
            <summary>
            Imaging: Image processing aborted
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.IMAGING_INVALID_BITS_PER_PIXEL">
            <summary>
            Imaging: Invalid image bits per pixel format
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PRINTER_OFFLINE">
            <summary>
            ZMC: Printer offline
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PRINTER_BUSY">
            <summary>
            ZMC: Printer busy
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_CMD">
            <summary>
            ZMC: Invalid command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_SUB_CMD">
            <summary>
            ZMC: Invalid sub-command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_PARAMETER_1">
            <summary>
            ZMC: Invalid parameter (1)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_PARAMETER_2">
            <summary>
            ZMC: Invalid parameter (2)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_PARAMETER_3">
            <summary>
            ZMC: Invalid parameter (3)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_CMD_PROCESSING_ERROR">
            <summary>
            ZMC: Command processing error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_RESPONSE_TOO_LARGE">
            <summary>
            ZMC: Response too large for host
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_READ_EXPECTED">
            <summary>
            ZMC: Host write occurred when host read expected
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_WRITE_EXPECTED">
            <summary>
            ZMC: Host read occurred when host write expected
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_DATA_LESS_THAN_SPECIFIED">
            <summary>
            ZMC: Data less than specified in header
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_DATA_MORE_THAN_SPECIFIED">
            <summary>
            ZMC: Data more than specified in header
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_COMM_SYNCH_ERROR">
            <summary>
            ZMC: Communication synch error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_END_ACTION_ERROR">
            <summary>
            ZMC: End Action error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_CANCEL_ACTION_ERROR">
            <summary>
            ZMC: Cancel Action error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_NO_START_ACTION">
            <summary>
            ZMC: No Start Action
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_DUP_START_ACTION">
            <summary>
            ZMC: Start Action already called
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_JOB_DATA_ERROR">
            <summary>
            ZMC: Job data error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_MEM_POOL_ALLOC_ERROR">
            <summary>
            ZMC: Memory-pool allocation error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_XML_PARSE_ERROR">
            <summary>
            ZMC: XML parse error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_PAYLOAD_LENGTH">
            <summary>
            ZMC: Invalid payload length
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_HMAC_MISSING">
            <summary>
            ZMC: HMAC missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_INVALID_PAYLOAD_CONTENT">
            <summary>
            ZMC: Invalid payload content
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_DEVICE_RESERVATION_ERROR">
            <summary>
            ZMC: Device reservation failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PARAMETER_OUTSIDE_RANGE">
            <summary>
            ZMC: Parameter value outside of valid range
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PARAMETER_WRONG_TYPE">
            <summary>
            ZMC: Incorrect parameter type
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PARAMETER_NOT_FOUND">
            <summary>
            ZMC: Parameter not found
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ZMC_PARAMETER_SETTING_ERROR">
            <summary>
            ZMC: Parameter setting error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_OUT_OF_CARDS">
            <summary>
            Media: Out of cards
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_INVALID_CARD_TYPE">
            <summary>
            Media: Invalid card type
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_CARD_JAM">
            <summary>
            Media: Card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_OUT_OF_RETRANSFER_MEDIA">
            <summary>
            Media: Out of retransfer media
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_INVALID_RETRANSFER_MEDIA">
            <summary>
            Media: Invalid retransfer media
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_RETRANSFER_MEDIA_JAM">
            <summary>
            Media: Retransfer media jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_RETRANSFER_MEDIA_MOTION_ERROR">
            <summary>
            Media: Retransfer media motion error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_CARD_NOT_DETECTED">
            <summary>
            Media: Card not detected
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_INSERT_CARD_TIMEOUT">
            <summary>
            Media: Insert card timeout
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_CARD_FEEDER_EMPTY">
            <summary>
            Media: Card feeder is empty
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEDIA_INVALID_RETRANSFER_MEDIA_MAC">
            <summary>
            Media: Invalid retransfer media MAC
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_OUT_OF_RIBBON">
            <summary>
            Donor: Out of ribbon
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_INVALID_RIBBON">
            <summary>
            Donor: Invalid ribbon
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_JAM">
            <summary>
            Donor: Ribbon jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_MOTION_ERROR">
            <summary>
            Donor: Ribbon motion error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_ADC_ERROR">
            <summary>
            Donor: Ribbon ADC error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_BEMF_ERROR">
            <summary>
            Donor: Ribbon BEMF error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_COLOR_DETECT_ERROR">
            <summary>
            Donor: Ribbon color detection error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_INVALID_RIBBON_MAC">
            <summary>
            Donor: Invalid ribbon MAC
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_LOW">
            <summary>
            Donor: Low ribbon
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_RIBBON_CALIBRATION_ERROR">
            <summary>
            Donor: Ribbon calibration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_DARK_CAL_HIGH_FLOOR">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_WEAK_DETECTOR">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_WEAK_EMITTER_LONG">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_WEAK_EMITTER_SHORT">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_UNSTABLE_SIGNAL_LONG">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.DONOR_UNSTABLE_SIGNAL_SHORT">
            <summary>
            Donor: Ribbon calibration sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_OUT_OF_RAM">
            <summary>
            Memory: Out of RAM
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_OUT_OF_EXT_FLASH">
            <summary>
            Memory: Out of external flash
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_OUT_OF_INT_FLASH">
            <summary>
            Memory: Out of internal flash
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_OUT_OF_NVM">
            <summary>
            Memory: Out of NVM
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_DATA_STORE_ERROR">
            <summary>
            Memory: Data store error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_DATA_DELETE_ERROR">
            <summary>
            Memory: Data delete error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FONT_STORE_ERROR">
            <summary>
            Memory: Font store error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FONT_DELETE_ERROR">
            <summary>
            Memory: Font delete error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_PROGRAM_FPGA_ERROR">
            <summary>
            Memory: Program FPGA error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_ERASE_FPGA_ERROR">
            <summary>
            Memory: Erase FPGA failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_PROGRAM_EP_ERROR">
            <summary>
            Memory: Program EP failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_ERASE_EP_ERROR">
            <summary>
            Memory: Erase EP failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_PROGRAM_IP_ERROR">
            <summary>
            Memory: Program IP failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_ERASE_IP_ERROR">
            <summary>
            Memory: Erase IP failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_MEM_POOL_ALLOC_ERROR">
            <summary>
            Memory: Pool allocation error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_MEM_POOL_DEALLOC_ERROR">
            <summary>
            Memory: Pool de-allocation error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_EP_COMM_ERROR">
            <summary>
            Memory: NVM EP communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_CRC_ERROR">
            <summary>
            Memory: NVM CRC error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_ACCESS_ERROR">
            <summary>
            Memory: NVM access error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_INIT_ERROR">
            <summary>
            Memory: NVM initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_BACKUP_ERROR">
            <summary>
            Memory: NVM backup error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_RESTORE_ERROR">
            <summary>
            Memory: NVM restore error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_OPEN_CLOSE_ERROR_">
            <summary>
            Memory: NVM open or close error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_PROGRAM_BACKUP_ERROR">
            <summary>
            Memory: NVM program backup error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_NVM_ERASE_BACKUP_ERROR">
            <summary>
            Memory: NVM erase backup error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FILE_INVALID_PATH">
            <summary>
            Memory: Invalid file path
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FILE_ACCESS_PERMISSION_ERROR">
            <summary>
            Memory: File access permission error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FILE_READ_ERROR">
            <summary>
            Memory: File read error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FILE_WRITE_ERROR">
            <summary>
            Memory: File write error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MEMORY_FILE_DELETE_ERROR">
            <summary>
            Memory: File delete error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_FEED_ERROR">
            <summary>
            Engine: Card feed error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_CLEANING_ERROR">
            <summary>
            Engine: Card cleaning error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINTHEAD_CABLE_DISCONNECTED">
            <summary>
            Engine: Printhead cable disconnected
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_EJECT_ERROR">
            <summary>
            Engine: Card eject error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINTHEAD_TEMP_TOO_HIGH">
            <summary>
            Engine: Printhead temperature too high
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINTHEAD_TEMP_TOO_LOW">
            <summary>
            Engine: Printhead temperature too low
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PROTOCOL_ERROR">
            <summary>
            Engine: Protocol error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_DOOR_OPEN">
            <summary>
            Engine: Door open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_INVALID_EP_SCRIPT">
            <summary>
            Engine: Invalid EP script
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINTHEAD_CAM_HOME_ERROR">
            <summary>
            Engine: Printhead CAM home error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_TRANSFER_ROLLERS_TEMP_TOO_HIGH">
            <summary>
            Engine: Transfer rollers temperature too high
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_TRANSFER_ROLLERS_TEMP_TOO_LOW">
            <summary>
            Engine: transfer rollers temperature too low
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_MOTOR_VOLTAGE_RANGE_ERROR">
            <summary>
            Engine: Motor voltage range error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_EP_SCRIPT_PROC_ERROR">
            <summary>
            Engine: EP script processing error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_MAG_RETRACE_ERROR">
            <summary>
            Engine: Mag retrace error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_TRANSFER_ERROR">
            <summary>
            Engine: Card transfer error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_REJECT_ERROR">
            <summary>
            Engine: Card reject error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_SMARTCARD_POS_ERROR">
            <summary>
            Engine: Smartcard positioning error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_EP_SCRIPT_CONTENT_ERROR">
            <summary>
            Engine: EP script content error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_EP_SCRIPT_TRANS_ERROR">
            <summary>
            Engine: EP script transmission error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINT_PATH_INIT_ERROR">
            <summary>
            Engine: Print path initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_FLIPPER_INIT_ERROR">
            <summary>
            Engine: Flipper initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_SMARTCARD_CAM_ERROR">
            <summary>
            Engine: Smartcard CAM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_OPTIONS_MODULE_CARD_JAM">
            <summary>
            Engine: Options module card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINT_PATH_CARD_JAM">
            <summary>
            Engine: Print path card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_FLIPPER_CARD_JAM">
            <summary>
            Engine: Flipper card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_MEDIA_DRAWER_OPEN">
            <summary>
            Engine: Media drawer open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_FEEDER_DOOR_OPEN">
            <summary>
            Engine: Feeder door open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_FLIPPER_MOVE_ERROR">
            <summary>
            Engine: Flipper move failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_ATM_CARD_JAM">
            <summary>
            Engine: ATM card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_REJECT_BIN_FULL">
            <summary>
            Engine: Reject bin full
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_MAG_ENCODER_CARD_JAM">
            <summary>
            Engine: Magnetic encoder card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CARD_JAM_PRINT_PATH">
            <summary>
            Engine: Print path card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINT_SYNCH_CARD_JAM">
            <summary>
            Engine: Print synchroniztion card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINT_ENTRANCE_CARD_JAM">
            <summary>
            Engine: Print entrance card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINT_EXIT_CARD_JAM">
            <summary>
            Engine: Print exit card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_INIT_FLIPPER_ERROR">
            <summary>
            Engine: Flipper initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PRINTHEAD_INIT_ERROR">
            <summary>
            Engine: Printhead initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_INIT_PRINT_PATH_ERROR">
            <summary>
            Engine: Print path initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_OPTIONS_MODULE_INIT_ERROR">
            <summary>
            Engine: Options module initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_SMARTCARD_INIT_ERROR">
            <summary>
            Engine: Smartcard initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_PUSHER_PLATE_ERROR">
            <summary>
            Engine: Pusher plate error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CLEANING_DUE_ERROR">
            <summary>
            Engine: Cleaning due error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CLEANING_PRE_WARNING_ERROR">
            <summary>
            Engine: Cleaning pre-warning error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ENGINE_CLEANING_REQUIRED_ERROR">
            <summary>
            Engine: Cleaning required error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.OCP_UNRESPONSIVE">
            <summary>
            OCP: Unresponsive
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.OCP_TRANSMIT_ERROR">
            <summary>
            OCP: Transmit error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAG_READ_ERROR">
            <summary>
            Mag: Read error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAG_WRITE_VERIFICATION_ERROR">
            <summary>
            Mag: Write verification error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAG_RECV_ERROR">
            <summary>
            Mag: Receive error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAG_NO_STRIPE_DETECTED">
            <summary>
            Mag: No magnetic stripe detected
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAG_NO_DATA_READ">
            <summary>
            Mag: No data read
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACT_READ_ERROR">
            <summary>
            Contact: Read error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACT_WRITE_VERIFICATION_ERROR">
            <summary>
            Contact: Write verification error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACT_ENCODING_TIMEOUT_ERROR">
            <summary>
            Contact: Encoding timeout error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_READ_ERROR">
            <summary>
            Contactless: Read error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_WRITE_VERIFICATION_ERROR">
            <summary>
            Contactless: Write verification error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_NO_READER_INSTALLED">
            <summary>
            Contactless: No reader installed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_INVALID_REGION_CODE">
            <summary>
            Contactless: Invalid region code
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_CHECKSUM_ERROR">
            <summary>
            Contactless: Checksum error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_FLASH_READ_ERROR">
            <summary>
            Contactless: Flash read error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_FLASH_WRITE_ERROR">
            <summary>
            Contactless: Flash write error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_RF_CONFIG_ERROR">
            <summary>
            Contactless: RF configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CONTACTLESS_UNKNOWN_MODULE_ERROR">
            <summary>
            Contactless: Unknown module error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_LOCKED">
            <summary>
            USB: Locked
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_OPEN_FAILED">
            <summary>
            USB: Open failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_HANDLE_ERROR">
            <summary>
            USB: Handle error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_SHORT_MESSAGE">
            <summary>
            USB: Message short
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_MESSAGE_ERROR">
            <summary>
            USB: Message error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_PAYLOAD_PENDING">
            <summary>
            USB: Payload pending
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_PAYLOAD_TOO_BIG">
            <summary>
            USB: Payload too big
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_RESTART_ERROR">
            <summary>
            USB: Restart
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.USB_SYNCH_ERROR">
            <summary>
            USB: Synchronization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_CREATE_JOB_ERROR">
            <summary>
            Job: Create job error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_QUEUE_ERROR">
            <summary>
            Job: Queue error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_ID_NOT_FOUND">
            <summary>
            Job: Job ID not found
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_INSUFFICIENT_MEMORY_AVAILABLE">
            <summary>
            Job: Insufficient memory available to accept job
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_EP_PROCESSING_ERROR">
            <summary>
            Job: EP Processing error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_CANCELLED">
            <summary>
            Job: Job cancelled
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_ABORTED">
            <summary>
            Job: Job aborted
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.JOB_BUFFER_FULL">
            <summary>
            Job: Job buffer full
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.HCB_CONTROL_BOARD_MISSING">
            <summary>
            HCB: Control board missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.HCB_BULB_ERROR">
            <summary>
            HCB: Bulb error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.HCB_SENSOR_ERROR">
            <summary>
            HCB: Sensor error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.HCB_BOOTLOADER_MODE">
            <summary>
            HCB: Bootloader mode - Firmware reload may be required
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAB_CONTROL_BOARD_MISSING">
            <summary>
            MAB: Control board missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MAB_BOOTLOADER_MODE">
            <summary>
            MAB: Bootloader mode - Firmware reload may be required
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_INVALID_PASSKEY">
            <summary>
            Security: Invalid passkey
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_INVALID_CRYPTO_KEY">
            <summary>
            Security: Invalid crypto key
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_AUTHENTICATION_FAILED">
            <summary>
            Security: Authentication failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_INVALID_PRINTER_DATA">
            <summary>
            Security: Invalid printer data
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_INVALID_HMAC">
            <summary>
            Security: Invalid HMAC
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_UNSUPPORTED_ACTION">
            <summary>
            Security: Unsupported action
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_CRYPTO_CREATE_RANDOM_ERROR">
            <summary>
            Security: Create random error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_CRYPTO_READ_RANDOM_ERROR">
            <summary>
            Security: Read random error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.SECURITY_CRYPTO_READ_SERIAL_NUMBER_ERROR">
            <summary>
            Security: Read serial number error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_MISSING">
            <summary>
            Laminator: Missing laminator
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_INIT_ERROR">
            <summary>
            Laminator: Initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_UNKNOWN_ERROR">
            <summary>
            Laminator: Unknown error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_MAB_MISSING">
            <summary>
            Laminator: Media authentication board missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_LAMINATE_FEED_ERROR">
            <summary>
            Lamintaor: Top laminate feed error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_LAMINATE_FEED_ERROR">
            <summary>
            Laminator: Bottom laminate feed error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_LAMINATE_REG_ERROR">
            <summary>
            Laminator: Top laminate registration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_STAGING_ERROR">
            <summary>
            Laminator: Staging error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_EARLY_CARD_JAM">
            <summary>
            Laminator: Early card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_MID_CARD_JAM">
            <summary>
            Laminator: Mid card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_LATE_CARD_JAM">
            <summary>
            Laminator: Late card jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_POLL_TIMEOUT">
            <summary>
            Laminator: Poll timeout
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_HEATER_ERROR">
            <summary>
            Laminator: Top heater error - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_HEATER_ERROR">
            <summary>
            Laminator: Bottom heater error - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_HEATER_OVER_TEMP">
            <summary>
            Laminator: Top heater over temperature - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_HEATER_OVER_TEMP">
            <summary>
            Laminator: Bottom heater over temperature - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_CUTTER_STALL">
            <summary>
            Laminator: Top cutter stall - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_CUTTER_STALL">
            <summary>
            Laminator: Bottom cutter stall - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_CUTTER_ERROR">
            <summary>
            Laminator: Top cutter failure - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_CUTTER_ERROR">
            <summary>
            Laminator: Bottom cutter failure - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_TOP_SENSOR_ERROR">
            <summary>
            Laminator: Top sensor failure - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_SENSOR_ERROR">
            <summary>
            Laminator: Bottom sensor failure - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_FAN_ERROR">
            <summary>
            Laminator: Fan failure - Power off printer and correct problem
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_EEPROM_CORRUPT">
            <summary>
            Laminator: EEPROM corrupt
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_OUT_OF_TOP_AND_BOTTOM_LAMINATE">
            <summary>
            Laminator: Out of top and bottom laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_OUT_OF_TOP_LAMINATE">
            <summary>
            Lamintaor: Out of top laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_OUT_OF_BOTTOM_LAMINATE">
            <summary>
            Laminator: Out of bottom laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_INVALID_TOP_LAMINATE">
            <summary>
            Laminator: Invalid top laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_INVALID_BOTTOM_LAMINATE">
            <summary>
            Laminator: Invalid bottom laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOTTOM_LAMINATE_REG_ERROR">
            <summary>
            Laminator: Bottom laminate registration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_REMOVE_TOP_LAMINATE">
            <summary>
            Laminator: Remove top laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_REMOVE_BOTTOM_LAMINATE">
            <summary>
            Laminator: Remove bottom laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_REMOIVE_TOP_AND_BOTTOM_LAMINATE">
            <summary>
            Laminator: Remove top and bottom laminate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_DOOR_OPEN">
            <summary>
            Laminator: Door open
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_INITIALIZING">
            <summary>
            Laminator: Initializing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_BOOTLOADER_MODE">
            <summary>
            Laminator: Bootloader mode - Firmware reload may be required
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.LAMINATOR_MAB_BOOTLOADER_MODE">
            <summary>
            Laminator: MAB Bootloader mode - Firmware reload may be required
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.ETHERNET_OPEN_ERROR">
            <summary>
            Ethernet: Open failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_OPEN_ERROR">
            <summary>
            WIFI: Open failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_ACCESS_POINT_MISSING">
            <summary>
            WIFI: Access point missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_LINK_LOST">
            <summary>
            WIFI: Link lost
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_INCOMPATIBLE_CONFIG">
            <summary>
            WIFI: Incompatible configuration
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_ASSOCIATION_ERROR">
            <summary>
            WIFI: Association failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.WIFI_CONNECTION_ERROR">
            <summary>
            WIFI: Connection failed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.BARCODE_INIT_ERROR">
            <summary>
            Barcode: Reader initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.BARCODE_INVALID_INCOMPLETE_DATA_READ">
            <summary>
            Barcode: Invalid/incomplete data read
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.BARCODE_NO_DATA_READ">
            <summary>
            Barcode: No data read
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_MISSING">
            <summary>
            STACKER: Module missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_UNAUTHORIZED">
            <summary>
            STACKER: Unauthorized module
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_INITIALIZATION_ERROR">
            <summary>
            STACKER: Initialization error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_ENTRY_JAM">
            <summary>
            STACKER: Entry jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_LIFT_JAM">
            <summary>
            STACKER: Lift jam
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_COMMUNICATION_ERROR">
            <summary>
            STACKER: Communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_HOPPER_ABSENT">
            <summary>
            STACKER: Hopper absent
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_HOPPER_FULL">
            <summary>
            STACKER: Hopper full
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_DECK_FULL">
            <summary>
            STACKER: Deck full
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.STACKER_INVALID_FIRMWARE">
            <summary>
            STACKER: Invalid firmware
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_SENSOR_COMM_ERROR">
            <summary>
            MCU: Sensor communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FEEDER_COMM_ERROR">
            <summary>
            MCU: Feeder control board communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FLIPPER_COMM_ERROR">
            <summary>
            MCU: Flipper control board communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_OPTIONS_COMM_ERROR">
            <summary>
            MCU: Options control board communication error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_SENSOR_FW_UPGRADE_ERROR">
            <summary>
            MCU: Sensor control board firmware upgrade error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FEEDER_FW_UPGRADE_ERROR">
            <summary>
            MCU: Feeder control board firmware upgrade error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FLIPPER_FW_UPGRADE_ERROR">
            <summary>
            MCU: Flipper control board firmware upgrade error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_OPTIONS_FW_UPGRADE_ERROR">
            <summary>
            MCU: Options control board firmware upgrade error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_SENSOR_MISSING">
            <summary>
            MCU: Sensor missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_SENSOR_BOOT_LOADER_MODE">
            <summary>
            MCU: Sensor control board in boot loader mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FEEDER_MISSING">
            <summary>
            MCU: Feeder missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FEEDER_BOOT_LOADER_MODE">
            <summary>
            MCU: Feeder control board in boot loader mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FLIPPER_MISSING">
            <summary>
            MCU: Flipper missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_FLIPPER_BOOT_LOADER_MODE">
            <summary>
            MCU: Flipper control board in boot loader mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_OPTIONS_MISSING">
            <summary>
            MCU: Options missing
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_OPTIONS_BOOT_LOADER_MODE">
            <summary>
            MCU: Options control board in boot loader mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.MCU_OPTIONS_BOARD_FAILURE">
            <summary>
            MCU: Options control board failure
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_VERSION_MISMATCH">
            <summary>
            CFG: Version mismatch
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_READ_INTO_DOM_ERROR">
            <summary>
            CFG: Read configuration into DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_WRITE_FROM_DOM_ERROR">
            <summary>
            CFG: Write from DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_PARSE_DOM_ERROR">
            <summary>
            CFG: Parse DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_READ_ACTIVE_ERROR">
            <summary>
            CFG: Read active configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_READ_COPY_ERROR">
            <summary>
            CFG: Reader configuration copy error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_READ_BACKUP_ERROR">
            <summary>
            CFG: Read backup configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_READ_DEFAULTS_ERROR">
            <summary>
            CFG: Read configuration defaults error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_COPY_ACTIVE_TO_COPY_ERROR">
            <summary>
            CFG: Copy active configuration to configuration copy error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_COPY_ACTIVE_TO_BACKUP_ERROR">
            <summary>
            CFG: Copy active configuration to backup error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_COPY_ACTIVE_TO_FACTORY_ERROR">
            <summary>
            CFG: Copy active configuration to factory error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_COPY_COPY_TO_ACTIVE_ERROR">
            <summary>
            CFG: Copy configuration copy to active configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CFG_COPY_BACKUP_TO_ACTIVE_ERROR">
            <summary>
            CFG: Copy backup configuration to active configuration error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_READ_INTO_DOM_ERROR">
            <summary>
            CNTR: Read into DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_WRITE_FROM_DOM_ERROR">
            <summary>
            CNTR: Write from DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_PARSE_DOM_ERROR">
            <summary>
            CNTR: Parse DOM error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_READ_FILE_ERROR">
            <summary>
            CNTR: Read file error
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_COPY_ACTIVE_TO_BACKUP">
            <summary>
            CNTR: Copy active counters to backup
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Errors.ZebraCardErrors.CNTR_COPY_BACKUP_TO_ACTIVE">
            <summary>
            CNTR: Copy backup counters to active counters
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">
            <summary>
            Generic Zebra card printer <c>Exception</c> class.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor">
            <summary>
            Constructs a <c>ZebraCardException</c>.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor(System.String)">
            <summary>
            Constructs a <c>ZebraCardException</c> with <c>message</c>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor(System.Exception)">
            <summary>
            Constructs a <c>ZebraCardException</c> with chained exception <c>cause</c>.
            </summary>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <c>ZebraCardException</c> with <c>message</c> and chained exception <c>cause</c>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a <c>ZebraCardException</c> with the <c>errorCode</c> and <c>message</c>.
            </summary>
            <param name="errorCode">The error code associated with the exception.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Exceptions.ZebraCardException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Constructs a <c>ZebraCardException</c> with the <c>errorCode</c>, <c>message</c> and chained exception <c>cause</c>.
            </summary>
            <param name="errorCode">The error code associated with the exception.</param>
            <param name="message">The exception message.</param>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="P:Zebra.Sdk.Card.Exceptions.ZebraCardException.ErrorCode">
            <summary>
            Returns the error code associated with the exception.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Containers.ExtractedImages">
            <summary>
            Container class used for the raw image data returned from <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.ExtractBlackImageData(System.Byte[],System.Byte,System.Byte,System.Byte)"/>.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.Containers.ExtractedImages.MonoImageData">
            <summary>
            Extracted monochrome image data (1bpp).
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.Containers.ExtractedImages.ColorImageData">
            <summary>
            Extracted color image data (24bpp).
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition">
            <summary>
            Specifies the location of where the image is to be drawn relative to its layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition.UpperLeft">
            <summary>
            Upper left hand corner of drawing surface.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition.LowerLeft">
            <summary>
            Lower left hand corner of drawing surface.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition.UpperRight">
            <summary>
            Upper right hand corner of drawing surface.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition.LowerRight">
            <summary>
            Lower right hand corner of drawing surface.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition.Centered">
            <summary>
            Center of drawing surface.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Enumerations.MonochromeConversion">
            <summary>
            Specifies the type of monochrome conversion to apply to the image.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.MonochromeConversion.None">
            <summary>
            No dithering.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.MonochromeConversion.Diffusion">
            <summary>
            Diffusion dithering.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.MonochromeConversion.HalfTone_8x8">
            <summary>
            Halftone dithering, 8x8 matrix.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.MonochromeConversion.HalfTone_6x6">
            <summary>
            Halftone dithering, 6x6 matrix.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel">
            <summary>
            Specifies the printer model type used to determine the max width and max height of the drawing surface.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZXPSeries7">
            <summary>
            ZXP Series 7 printer.
            </summary>
            <ul>
            <li>Max Width = 1006</li>
            <li>Max Height = 640</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZXPSeries8">
            <summary>
            ZXP Series 8 printer.
            </summary>
            <ul>
            <li>Max Width = 1024</li>
            <li>Max Height = 648</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZXPSeries9">
            <summary>
            ZXP Series 9 printer.
            </summary>
            <ul>
            <li>Max Width = 1024</li>
            <li>Max Height = 648</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZC100">
            <summary>
            ZC 100 Series printer.
            </summary>
            <ul>
            <li>Max Width = 1006</li>
            <li>Max Height = 640</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZC150">
            <summary>
            ZC 150 Series printer.
            </summary>
            <ul>
            <li>Max Width = 1006</li>
            <li>Max Height = 640</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZC300">
            <summary>
            ZC 300 Series printer.
            </summary>
            <ul>
            <li>Max Width = 1006</li>
            <li>Max Height = 640</li>
            </ul>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.PrinterModel.ZC350">
            <summary>
            ZC 350 Series printer.
            </summary>
            <ul>
            <li>Max Width = 1006</li>
            <li>Max Height = 640</li>
            </ul>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Enumerations.RotationType">
            <summary>
            Specifies the rotation of the image.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate180FlipXY">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.RotateNoneFlipNone">
            <summary>
            Specifies no rotation and no flipping.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate270FlipXY">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate90FlipNone">
            <summary>
            Specifies a 90-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate180FlipNone">
            <summary>
            Specifies a 180-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.RotateNoneFlipXY">
            <summary>
            Specifies no rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate270FlipNone">
            <summary>
            Specifies a 270-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate90FlipXY">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate180FlipY">
            <summary>
            Specifies a 180-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.RotateNoneFlipX">
            <summary>
            Specifies no rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate90FlipX">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate270FlipY">
            <summary>
            Specifies a 270-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.RotateNoneFlipY">
            <summary>
            Specifies no rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate180FlipX">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate90FlipY">
            <summary>
            Specifies a 90-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.RotationType.Rotate270FlipX">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment">
            <summary>
            Specifies the text alignment relative to its layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment.Left">
            <summary>
            Text is aligned to the left of the layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment.Center">
            <summary>
            Text is aligned to the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment.Right">
            <summary>
            Text is aligned to the right of the layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment.Top">
            <summary>
            Text is aligned to the top of the layout rectangle.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Graphics.Enumerations.TextAlignment.Bottom">
            <summary>
            Text is aligned to the bottom of the layout rectangle.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.ZebraCardImage">
            <summary>
            Class for platform-dependent graphic bitmap image data.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraCardImage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <c>ZebraCardImage</c> class.
            </summary>
            <param name="imageData">The raw bitmap image data.</param>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraCardImage.ImageData">
            <summary>
            Returns the raw bitmap image data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.ZebraCardImageI">
            <summary>
            Interface for platform-dependent graphic images.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraCardImageI.ImageData">
            <summary>
            Returns the bitmap formatted image data.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Graphics.ZebraGraphicsI">
            <summary>
            Interface for all Zebra card printer graphics related tasks.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.Initialize(System.Int32,System.Int32,Zebra.Sdk.Card.Enumerations.OrientationType,Zebra.Sdk.Card.Enumerations.PrintType,System.Nullable{System.Int32})">
            <summary>
            Initializes the drawing surface.
            </summary>
            <remarks>
            If the specified <c>maxWidth</c> or <c>maxHeight</c> is 0, then the maximum values for the specified printer model will be used.
            </remarks>
            <param name="maxWidth">The maximum width of the image (limited based on printer model).</param>
            <param name="maxHeight">The maximum height of the image (limited based on printer model).</param>
            <param name="orientation">The orientation of the image. (default is OrientationType.Landscape)</param>
            <param name="printType">The type of print to be performed. (default is PrintType.Color)</param>
            <param name="fillColor">The RGB background fill color. (default is White or 0xffffff)</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs initializing the graphics objects.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.DrawImage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Zebra.Sdk.Card.Graphics.Enumerations.RotationType)">
            <summary>
            Draws the image into the specified rectangle.
            </summary>
            <param name="imageData">The bitmap image data.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <ul><li>If 0, then the width of the specified image will be used.</li></ul>
            <param name="height">The height of the rectangle.</param>
            <ul><li>If 0, then the height of the specified image will be used</li></ul>
            <param name="rotationType">The rotation of the image.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rendering the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.DrawImage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Single,Zebra.Sdk.Card.Graphics.Enumerations.RotationType)">
            <summary>
            Draws the image into the specified rectangle.
            </summary>
            <param name="imageData">The bitmap image data.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <ul><li>If <c>width</c> is 0, then the width of the specified image will be used.</li></ul>
            <param name="height">The height of the rectangle.</param>
            <ul><li>If <c>height</c> is 0, then the height of the specified image will be used.</li></ul>
            <param name="transparency">The transparency level.</param>
            <ul><li>0.0f = completely opaque</li><li>100.0f = completely transparent</li></ul>
            <param name="rotationType">The rotation type for the image.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rendering the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.DrawImage(System.Byte[],Zebra.Sdk.Card.Graphics.Enumerations.ImagePosition,System.Int32,System.Int32,System.Single,Zebra.Sdk.Card.Graphics.Enumerations.RotationType)">
            <summary>
            Draws the image at the specified image position in the rectangle.
            </summary>
            <param name="imageData">The bitmap image data.</param>
            <param name="position">The position of the image in the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <ul><li>If <c>width</c> is 0, then the width of the specified image will be used.</li></ul>
            <param name="height">The height of the rectangle.</param>
            <ul><li>If <c>height</c> is 0, then the height of the specified image will be used.</li></ul>
            <param name="transparency">The transparency level.</param>
            <ul><li>0.0f = completely opaque</li><li>100.0f = completely transparent</li></ul>
            <param name="rotationType">The rotation type for the image.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rendering the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage">
            <summary>
            Generates the final bitmap image.
            </summary>
            <returns>Instance containing the bitmap image data.</returns>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rendering the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.Clear">
            <summary>
            Clears the drawing surface and all user specified parameters.
            </summary>
            <remarks>If any non-default values were specified during a previous call to Initialize, then Initialize 
            will need to be called again following this method.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.Close">
            <summary>
            Releases all resources.
            </summary>
            <remarks>Initialize must be called prior to creating any new graphics.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.MonochromeConverionType">
            <summary>
            Gets or Sets the monochrome conversion type to be used during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>Valid for ribbon types of 1bpp and 8bpp only.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.BrightnessLevel">
            <summary>
            Sets the brightness correction level to be applied during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>
            <ul>
            <li>Range: -25 to 25</li>
            <li>Values passed in (-25 to 25) will be converted to a range of -127 to 127 before being applied to each pixel
            (e.g. a value of 25 will correspond to an actual offset of 127).</li>
            </ul>
            </remarks>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the value is outside of the specified range.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.ContrastLevel">
            <summary>
            Sets the contrast correction level to be applied during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>
            <ul>
            <li>Range: -25 to 25</li>
            <li>Values passed in (-25 to 25) will be converted to a range of -127 to 127 before being applied to each pixel
            (e.g. a value of 25 will correspond to an actual offset of 127).</li>
            </ul>
            </remarks>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the arguments are outside of the specified range.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.GammaLevel">
            <summary>
            Sets the gamma correction level to be applied during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>Range: -25 to 25.</remarks>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the arguments are outside of the specified range.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.SaturationLevel">
            <summary>
            Sets the saturation level to be applied during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>Range: -25 to 25.</remarks>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the arguments are outside of the specified range.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.SetColorScale(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color scale correction values for red, green, and blue pixel values during <see cref="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CreateImage"/>.
            </summary>
            <remarks>
            <ul>
            <li>Range: -25 to 25</li>
            <li>Values passed in (-25 to 25) will be converted to a range of -127 to 127 before being applied to each pixel
            (e.g. a value of 25 will correspond to an actual offset of 127).</li>
            </ul>
            </remarks>
            <param name="red">The red pixel correction value.</param>
            <param name="blue">The blue pixel correction value.</param>
            <param name="green">The green pixel correction value.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the arguments are outside of the specified range.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.RotateImage(System.Byte[],Zebra.Sdk.Card.Graphics.Enumerations.RotationType)">
            <summary>
            Rotates the image by the specified <c>rotationType</c>.
            </summary>
            <param name="imageData">The bitmap image source data.</param>
            <param name="rotationType">The rotation type.</param>
            <returns>The rotated bitmap image data.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rotating the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.RotateImage(System.Byte[],System.Int32,System.Int32,Zebra.Sdk.Card.Graphics.Enumerations.RotationType)">
            <summary>
            Rotates the image by the specified <c>rotationType</c> and then resizes it.
            </summary>
            <param name="imageData">The bitmap image source data.</param>
            <param name="width">The rotated image width.</param>
            <param name="height">The rotated image height.</param>
            <param name="rotationType">The rotation type.</param>
            <returns>The rotated and resized bitmap image data.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while rotating the image.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.PrinterModel">
            <summary>
            Gets or Sets the printer model for use when creating or processing graphic images.
            </summary>
            <remarks>Not needed if the constructor that accepts the <see cref="T:Zebra.Sdk.Card.Printer.ZebraCardPrinter"/> object is used; otherwise,
            the printer model should be set prior to all Initialize(...) methods or individual image processing methods to ensure
            that the correct width and height values are used./></remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.ExtractBlackImageData(System.Byte[],System.Byte,System.Byte,System.Byte)">
            <summary>
            Separates the monochrome and color data from the specified image data using the specified threshold values.
            </summary>
            <param name="imageData">The 24 or 32 bpp color image data.</param>
            <param name="redThreshold">The red pixel threshold value.</param>
            <ul><li>Range: 0 to 255</li></ul>
            <param name="greenThreshold">The green pixel threshold value.</param>
            <ul><li>Range: 0 to 255</li></ul>
            <param name="blueThreshold">The blue pixel threshold value.</param>
            <ul><li>Range: 0 to 255</li></ul>
            <returns>Instance of ExtractedImages containing the color and monochrome image data.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while extracting the monochrome data.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.ExtractHalfPanelImageData(System.Byte[])">
            <summary>
            Attempts to identify and extract the color and non-color half panel regions of the source image.
            </summary>
            <remarks>
            <ul>
            <li>For ZMotif Series 7 and ZC Series printers only.</li>
            <li>The printer model must be set prior to calling this method. (ZebraCardGraphics(ZebraCardPrinter zebraCardPrinter) or <see cref="P:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.PrinterModel"/>)"/></li>
            </ul>
            </remarks>
            <param name="imageData">The 24bpp bitmap color image data.</param>
            <returns>The extracted half panel color image data.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>imageData</c> is invalid or the printer model is not supported.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while extracting the half panel image data.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Graphics.ZebraGraphicsI.CropImage(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops an image to the supplied dimensions.
            </summary>
            <param name="imageData">The bitmap image data.</param>
            <param name="x">The x coordinate of the cropped image.</param>
            <param name="y">The y coordinate of the cropped image.</param>
            <param name="width">The width of the cropped image.</param>
            <param name="height">The height of the cropped image.</param>
            <returns>Bitmap data containing the cropped image.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error with the provided arguments.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while cropping the image.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetAllJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetAllJobSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetJobSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetJobSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetJobSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.GetJobSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.IsJobSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.IsJobSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.IsJobSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.SetJobSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobControlUtilA.SetJobSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.Cancel(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.EjectCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.GetJobList">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.GetJobStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.PositionCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.MagEncode(System.Int32,System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.PrintTemplate(System.Int32,Zebra.Sdk.Card.Containers.TemplateJob)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.PrintAndMagEncode(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.Reprint(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.Resume">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.SmartCardEncode(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Internal.JobUtilA.Destroy">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.JobControlProvider">
            <summary>
            Interface that provides access to job related settings.
            </summary>
            <remarks>Job settings are not persistent and must be set prior to each job.</remarks>
            <example><code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/JobControlProviderExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetJobSettings">
            <summary>
            Retrieve all of the setting identifiers for a device.
            </summary>
            <remarks>
            The setting names that may be used as keys for retrieving and updating settings for a device.
            <see cref="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingValue(System.String)"/>
            </remarks>
            <returns>A <c>HashSet</c> of the identifiers available for a device.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetJobSettingValue(System.String)">
            <summary>
            Retrieves the device's setting value for a setting ID.
            </summary>
            <param name="settingId">The setting ID.</param>
            <returns>The setting's value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetJobSettingsValues(System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves the device's setting values for a list of setting IDs.
            </summary>
            <param name="listOfSettings">List of setting IDs.</param>
            <returns>A <c>Dictionary</c> containing the setting ID's and their values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetAllJobSettings">
            <summary>
            Retrieve all settings and their attributes.
            </summary>
            <returns>A <c>Dictionary</c> of job setting IDs and setting attributes contained in the profile.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetAllJobSettingValues">
            <summary>
            Retrieves all of the device's setting values.
            </summary>
            <returns>A <c>Dictionary</c> containing the job setting IDs and values of all the settings provided by the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.SetJobSetting(System.String,System.String)">
            <summary>
            Sets the setting to the given value.
            </summary>
            <param name="settingId">The setting ID.</param>
            <param name="value">The setting's value</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.SetJobSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set more than one setting.
            </summary>
            <param name="settingValuePairs">A <c>Dictionary</c> containing the setting IDs and new values.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings cannot be sent to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetJobSettingRange(System.String)">
            <summary>
            Retrieves the allowable range for a setting.
            </summary>
            <param name="settingId">The setting ID.</param>
            <returns>The setting's range as a string</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.IsJobSettingValid(System.String,System.String)">
            <summary>
            Returns true if value is valid for the given setting.
            </summary>
            <param name="settingId">The setting ID.</param>
            <param name="value">The setting's value</param>
            <returns>True if value is valid for the given setting.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.IsJobSettingReadOnly(System.String)">
            <summary>
            Returns true if the setting is read only.
            </summary>
            <param name="settingId">The setting ID.</param>
            <returns>True if the setting is read only</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.IsJobSettingWriteOnly(System.String)">
            <summary>
            Returns true if the setting is write only.
            </summary>
            <param name="settingId">The setting ID.</param>
            <returns>True if the setting is write only</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobControlProvider.GetJobSettingType(System.String)">
            <summary>
            Returns the data type of the setting.
            </summary>
            <param name="settingId">The setting ID.</param>
            <returns>The data type of the setting (e.g. string, bool, enum, etc.)</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.JobUtil">
            <summary>
            An interface used to define functions used in job related operations.
            </summary>
            <remarks>All Job settings must be set separately for each job.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.Cancel(System.Int32)">
            <summary>
            Cancels all jobs or a specific job.
            </summary>
            <param name="jobID">The ID of the job to cancel.</param>
            <ul><li>Set jobID to '0' to cancel all jobs.</li></ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.EjectCard">
            <summary>
            Sends the card to the eject bin.
            </summary>
            <remarks>
            <ul><li>A smart card encoding job is a separate activity and the card cannot be ejected from the encoder. The job must be resumed or aborted.</li></ul>
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.GetJobList">
            <summary>
            Returns a list of all the current jobs in the printer's queue.
            </summary>
            <returns>A <c>List</c> containing all the current jobs in the printer's queue.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs processing the job list data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.GetJobStatus(System.Int32)">
            <summary>
            Returns the job status for the specified <c>jobId</c>.
            </summary>
            <param name="jobId">ID number of the job.</param>
            <returns>A <c>JobStatusInfo</c> instance containing the requested job status information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If <c>jobId</c> is invalid or if an error occurs processing the job status data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or <c>jobId</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.PositionCard">
            <summary>
            Moves a card from the specified source to the specified destination.
            </summary>
            <remarks>
            <ul>
            <li><see cref="T:Zebra.Sdk.Card.Enumerations.CardSource"/> and <see cref="T:Zebra.Sdk.Card.Enumerations.CardDestination"/> can be individually set prior to calling this method otherwise the default 
            values of <see cref="F:Zebra.Sdk.Card.Enumerations.CardSource.Feeder"/> and <see cref="F:Zebra.Sdk.Card.Enumerations.CardDestination.Eject"/> will be used.</li>
            </ul>
            </remarks>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an error occurs while building the job.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.MagEncode(System.Int32,System.String,System.String,System.String)">
            <summary>
            Encodes a magnetic card for the current job.
            </summary>
            <param name="copies"> Number of copies to be encoded.</param>
            <param name="track1Data">Data to be encoded on track 1.</param>
            <param name="track2Data">Data to be encoded on track 2.</param>
            <param name="track3Data">Data to be encoded on track 3.</param>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or there is an error creating the job.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the supplied arguments are invalid or an error occurs while building the job.</exception>
            <example>Demonstrates how to encode a magnetic card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/MagneticEncodeExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})">
            <summary>
            Prints a card.
            </summary>
            <param name="copies">The number of copies to be printed.</param>
            <param name="graphicsData">A <c>List</c> containing details of the images to be printed.</param>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error with the job settings.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or there is an error creating the job.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>copies</c> or <c>graphicsData</c> are invalid or an error occurs while building the job.</exception>
            <example>Demonstrates how to print a color image with full overlay on the front side of the card and a monochrome image on the back.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/PrintYMCKOExample.cs"/>
            </example>
            <example>Demonstrates how to print a monochrome image on the back side of the card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/PrintMonoExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.PrintTemplate(System.Int32,Zebra.Sdk.Card.Containers.TemplateJob)">
            <summary>
            Prints a card from the provided <c>templatejobData</c>.
            </summary>
            <param name="copies">The number of copies to be printed.</param>
            <param name="templateJob">A <c>TemplateJob</c> instance containing details of the job to be executed.</param>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or if the specified arguments are invalid.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>copies</c> or <c>templateJob</c> are invalid or an error occurs while building the job.</exception>
            <example>Demonstrates how to create and print a template job.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/PrintTemplateExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.PrintAndMagEncode(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},System.String,System.String,System.String)">
            <summary>
            Writes the magnetic encoding data and prints a card.
            </summary>
            <param name="copies">The number of copies to be printed.</param>
            <param name="graphicsData">A <c>List</c> containing details of the images to be printed.</param>
            <param name="track1Data">Data to be encoded on track 1.</param>
            <param name="track2Data">Data to be encoded on track 2.</param>
            <param name="track3Data">Data to be encoded on track 3.</param>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or if the specified arguments are invalid.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the supplied arguments are invalid or an error occurs while building the job.</exception>
            <example>Demonstrates how to encode and print to a magnetic card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/MagneticEncodeAndPrintExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource)">
            <summary>
            Reads the data from a magnetically encoded card.
            </summary>
            <param name="tracksToRead">Specifies which tracks to read data from.</param>
            <returns>A <c>MagTrackData</c> instance containing the magnetic data read from the card.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:System.TimeoutException">If the process times out while trying to read the data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or there is an error creating the job.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>tracksToRead</c> is invalid or an error occurs while building the job.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource,System.Boolean)">
            <summary>
            Reads the data from a magnetically encoded card.
            </summary>
            <param name="tracksToRead">Specifies which tracks to read data from.</param>
            <param name="isVerbose">True to increase the amount of detail presented to the user (Console.Out).</param>
            <returns>A <c>MagTrackData</c> instance containing the magnetic data read from the card.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:System.TimeoutException">If the process times out while trying to read the data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>tracksToRead</c> is invalid or an error occurs while building the job.</exception>
            <example>Demonstrates how to read data from a magnetic card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/ReadMagneticCardExample.cs"/>
            </example>
            <example>Demonstrates how to read from, and print to, a magnetic card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/ReadMagneticCardAndPrintExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.Reprint(System.Int32)">
            <summary>
            Reprints the last rendered job.
            </summary>
            <param name="copies">The number of copies to reprint.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>copies</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.Resume">
            <summary>
            Resumes the processing of a held job such as a smart card encoding job.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.SmartCardEncode(System.Int32)">
            <summary>
            Positions a card at the smart card station, suspends the job to allow the card to be read or encoded, and waits for <see cref="M:Zebra.Sdk.Card.Job.JobUtil.Resume"/> 
            to be called before completing the job.
            </summary>
            <remarks>
            <ul><li>Smart card job settings must be configured prior to calling this method in order to specify the card type.</li></ul>
            </remarks>
            <param name="copies">Number of cards to be encoded.</param>
            <returns>The assigned job ID number.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the job settings are not valid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs or <c>copies</c> is invalid.</exception>
            <example>Demonstrates how to position a smart card for encoding.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/PositionSmartCardExample.cs"/>
            </example>
            <example>Demonstrates how to position and print to a smart card.
            <code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Job/Examples/PositionSmartCardAndPrintExample.cs"/>
            </example>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.JobUtil.Destroy">
            <summary>
            Clean up all the resources and stop any running threads.
            </summary>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the device is busy, a printer error, or there is an error communicating with the printer.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.Template">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.CardType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.Thickness">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.Delete">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.CardDestination">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.Template.CardSource">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.Template.Fonts">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.Template.Sides">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Field">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.FontId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.XOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.YOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Rotation">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Multiplier">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Ratio">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Width">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Height">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.BarHeight">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.QuietZoneWidth">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.AddChecksum">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.DisplayChecksum">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.ForeColor">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.BarColor">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.BackColor">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.ShowText">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.BarcodeData">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.PrintType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.AspectRatio">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Columns">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Rows">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.CompactionType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.CorrectionLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.FileId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SegmentCount">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SegmentIndex">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.Truncated">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.MicroPdf417Ver">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.DisplayGuardBar">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.DisplayLMIndicator">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.GuardBarHeight">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SupplementCode">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SupplementSeparation">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SupplementTopMargin">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.SupplementType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.UpceSystem">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.EncodeType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.ErrorCorrectionLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.CodeVersion">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.ModuleSize">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateBarcode.EncodingName">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.X">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Y">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Width">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Height">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Thickness">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Color">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.Fill">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateEllipse.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.ID">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.Size">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.Bold">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.Italic">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateFont.Underline">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Field">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Format">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Opacity">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Height">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Width">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.XOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.YOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Rotation">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.Delete">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.ImageName">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateGraphic.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.X1">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.Y1">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.X2">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.Y2">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.Thickness">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.Color">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateLine.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateMag">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMag.Format">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMag.Coercivity">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMag.Verify">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplateMag.TrackData">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateMagTrack">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMagTrack.Field">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMagTrack.Track">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMagTrack.Format">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateMagTrack.Data">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateObject">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateObject.FontId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateObject.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateObject.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.Fill">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.Preheat">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.PrintType">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.TextData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.LineData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.GraphicData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.BarcodeData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.EllipseData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplatePrintType.RectangleData">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.X">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Y">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Width">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Height">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Thickness">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Color">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Fill">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.Radius">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateRectangle.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.Orientation">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.Rotation">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.Sharpness">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.KMode">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.PrintTypes">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.Template.Internal.TemplateSide.MagData">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.Internal.TemplateText">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.Field">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.FontId">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.XOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.YOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.Color">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.Angle">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.Width">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.Height">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.HorizAlignment">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.VertAlignment">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.ShrinkToFit">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.TextData">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Job.Template.Internal.TemplateText.PrintType">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.Template.ZebraTemplate">
            <summary>
            Interface used to define functions used in template related operations.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.SetTemplateFileDirectory(System.String)">
            <summary>
            Sets the directory location for retrieving/storing template files.
            </summary>
            <param name="directoryPath">The directory path for template files.</param>
            <exception cref="T:System.IO.IOException">If there is an error accessing or creating the template file directory.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>directoryPath</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.DeleteTemplateFileData(System.String)">
            <summary>
            Deletes the specified template.
            </summary>
            <param name="templateName">The name of the template.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the specified template is not found.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template name is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error deleting the template file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.SaveTemplateFileData(System.String,System.String)">
            <summary>
            Saves the specified template data.
            </summary>
            <param name="templateName">The name of the template.</param>
            <param name="templateData">The XML formatted template data.</param>
            <exception cref="T:System.IO.IOException">If there is an error saving the <c>templateData</c> to a file.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the arguments are invalid or the specified <c>templateName</c> already exists.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateFileData(System.String)">
            <summary>
            Returns the specified template data.
            </summary>
            <param name="templateName">The name of the template.</param>
            <returns>The XML formatted template data.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If the specified template is not found.</exception>
            <exception cref="T:System.IO.IOException">If an error occurs while accessing the requested template.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template name is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error retrieving the template data.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateFileNames">
            <summary>
            Returns a list of the stored template names.
            </summary>
            <returns>A <c>List</c> containing the stored template names.</returns>
            <exception cref="T:System.IO.IOException">If an error occurs while accessing the stored templates.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateFields(System.String)">
            <summary>
            Returns a list of the template fields from the specified XML template.
            </summary>
            <param name="templateName">The name of a previously saved template. (<see cref="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.SaveTemplateFileData(System.String,System.String)"/>)</param>
            <returns>List containing the template field names.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If the specified template is not found.</exception>
            <exception cref="T:System.IO.IOException">If an error occurs while accessing the requested template.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template name is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error retrieving the template data fields.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateDataFields(System.String)">
            <summary>
            Returns a list of the template fields from the XML template data.
            </summary>
            <param name="templateData">The XML formatted template data.</param>
            <returns>A <c>List</c> containing the template field names.</returns>
            <exception cref="T:System.IO.IOException">If an error occurs while accessing the requested template.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template data is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error retrieving the template data fields.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.SetTemplateImageDirectory(System.String)">
            <summary>
            Sets the directory location for retrieving/storing template image files.
            </summary>
            <param name="directoryPath">The directory path for template image files.</param>
            <exception cref="T:System.IO.IOException">If there is an error accessing or creating the template image file directory.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>directoryPath</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.DeleteTemplateImage(System.String)">
            <summary>
            Deletes the specified template image.
            </summary>
            <param name="imageName">The name of the image.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the specified image is not found.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.SaveTemplateImage(System.String,System.Byte[])">
            <summary>
            Saves the specified template image data.
            </summary>
            <param name="imageName">The name of the image.</param>
            <param name="imageData">The image data.</param>
            <exception cref="T:System.IO.IOException">If an error occurs while saving the image data.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified image name and/or data is empty or null.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateImageNames">
            <summary>
            Returns a list of all stored template image names.
            </summary>
            <returns>A <c>List</c> containing the stroed template image file names.</returns>
            <exception cref="T:System.IO.IOException">If an error is encountered while accessing the stored image files.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GetTemplateImageData(System.String)">
            <summary>
            Returns the raw image data from the specified image name.
            </summary>
            <param name="imageName">The name of the image.</param>
            <returns>The raw image data.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If the specified image is not found.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified image name is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.ConvertDataDocumentToDataMap(System.String)">
            <summary>
            Converts a JSON or XML formatted template data document into a Dictionary object.
            </summary>
            <param name="dataDocument">JSON or XML formatted template data document.</param>
            <returns>A Dictionary object containing the template field names as the keys and the template field values for the key values.</returns>
            <exception cref="T:System.IO.IOException">If an error occurs while parsing the <c>dataDocument</c>.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>dataDocument</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GenerateTemplateJob(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns an instance of the TemplateJob object containing the job specific data.
            </summary>
            <param name="templateName">The name of the template.</param>
            <param name="fieldDataMap">A <c>Dictionary</c> object containing the template field names as the keys and the template field values for the key values.</param>
            <returns>A <c>TemplateJob</c> object containing the required job specific data.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or an error occurs communicating with the printer.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the specified template or referenced image file/s are not found.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template data or field data is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error generating the template job.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Job.Template.ZebraTemplate.GenerateTemplateDataJob(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns an instance of the TemplateJob object containing the job specific data.
            </summary>
            <param name="templateData">The XML formatted template data.</param>
            <param name="fieldDataMap">A <c>Dictionary</c> object containing the template field names as the keys and the template field values for the key values.</param>
            <returns>A <c>TemplateJob</c> object containing the required job specific data.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or an error occurs communicating with the printer.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the specified template or referenced image file/s are not found.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the specified template data or field data is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If there is an error generating the template job.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames">
            <summary>
            Container class for common card printer job parameter key names.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.CARD_SOURCE">
            <summary>
            Card source.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.CARD_DESTINATION">
            <summary>
            Card destination.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.DATA_SOURCE">
            <summary>
            Data source.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.DELETE_AFTER">
            <summary>
            Delete after.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_ENCODE_SIDE">
            <summary>
            Magnetic encode card side.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_COERCIVITY">
            <summary>
            Magnetic encoding coercivity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_ENCODING_TYPE">
            <summary>
            Magnetic encoding type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_VERIFY">
            <summary>
            Magnetic encoding verification.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_TRACK_1_DENSITY">
            <summary>
            Magnetic track 1 density.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_TRACK_2_DENSITY">
            <summary>
            Magnetic track 2 density.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.MAG_TRACK_3_DENSITY">
            <summary>
            Magnetic track 3 density.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.SMART_CARD_CONTACT">
            <summary>
            Smart card front contact encode job.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.SMART_CARD_CONTACTLESS">
            <summary>
            Smart card front contactless encode job.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.K_OPTIMIZATION_FRONT">
            <summary>
            Monochrome optimization front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.K_OPTIMIZATION_BACK">
            <summary>
            Monochrome optimization back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Job.ZebraCardJobSettingNames.PRINT_OPTIMIZATION">
            <summary>
            Print optimization mode.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Mutex.Internal.Mutex.LockMutex">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Mutex.Internal.Mutex.LockMutex(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Mutex.Internal.MutexLock.#ctor">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Mutex.Internal.MutexLock.#ctor(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler">
            <summary>
            Handler class used to update status while performing a firmware download and to notify the caller when the printer has reconnected after restarting.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler.FirmwareDownloadComplete">
            <summary>
            Called when the firmware download completes.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler.PrinterOnline(Zebra.Sdk.Card.Printer.ZebraCardPrinter,System.String)">
            <summary>
            Called when the printer is back online and has been rediscovered.
            </summary>
            <param name="printer">The printer object which came back online.</param>
            <param name="firmwareVersion">The new firmware version on the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler.ProgressUpdate(System.Int32,System.Int32)">
            <summary>
            Callback to notify the user of the firmware updating progress.
            </summary>
            <param name="bytesWritten">The total number of bytes written to the printer.</param>
            <param name="totalBytes">The total number of bytes to be written to the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler.ProgressUpdate(System.String,System.Int32)">
            <summary>
            Called during individual firmware module upgrades.
            </summary>
            <param name="status">The current firmware module being loaded.</param>
            <param name="percentComplete">The completion percentage of the currently loading firmware module or 0 if no completion percentage is available.</param>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler">
            <summary>
            Interface definition for a callback to be invoked when a printer comes back online and has been rediscovered.
            </summary>
            <see cref="T:Zebra.Sdk.Card.Comm.CardConnectionReestablisher"/>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler.PrinterOnline(Zebra.Sdk.Card.Printer.ZebraCardPrinter,System.String)">
            <summary>
            Called when the printer is back online and has been rediscovered.
            </summary>
            <param name="printer">The printer object that came back online.</param>
            <param name="firmwareVersion">The current firmware version on the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler.ProgressUpdate(System.String,System.Int32)">
            <summary>
            Called during individual firmware module upgrades.
            </summary>
            <param name="status">The current firmware module being loaded.</param>
            <param name="percentComplete">The completion percentage of the currently loading firmware module or 0 if no completion percentage is available.</param>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.Discovery.DiscoveredCardPrinterNetwork">
            <summary>
            Instance of <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter"/> that is returned when performing a network discovery for card printers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.DiscoveredCardPrinterNetwork.#ctor(System.String,System.Int32)">
            <summary>
            Returns an instance of a <c>DiscoveredCardPrinterNetwork</c> with <c>address</c> and <c>port</c>.
            </summary>
            <param name="address">The address of the discovered network card printer</param>
            <param name="port">The active raw port of the discovered network card printer</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.DiscoveredCardPrinterNetwork.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns an instance of a <c>DiscoveredCardPrinterNetwork</c> built using the provided attributes.
            </summary>
            <param name="attributes">A map of attributes associated with the discovered network card printer</param>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.DiscoveredCardPrinterNetwork.GetConnection">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.DirectedBroadcast.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.DirectedBroadcast.#ctor(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.DirectedBroadcast.ToString">
            <see cref="M:System.Object.ToString"/> 
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.DirectedBroadcast.GetDirectedBroadcastAddress(System.String)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.DiscoveredCardPrinterNetworkFactory.CreateMapFromDiscoData(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>"
            <exception cref="T:System.Text.EncoderFallbackException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.FindPrinters.DoDiscovery">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.LocalBroadcast.#ctor(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.LocalBroadcast.#ctor(System.Collections.Generic.List{System.String},System.Int32)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.PrinterNameSearch.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.PrinterNameSearch.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SnmpDiscoveryA.DoBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SnmpDiscoveryA.StartDiscoveryInBackground">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SnmpDiscoveryA.Discover(System.Net.Sockets.UdpClient,System.Net.IPAddress,System.Byte[])">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SnmpDiscoveryA.VerifyNicAdapterList">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SubnetSearch.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SubnetSearch.#ctor(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SubnetSearch.GetAddressesToSearch(System.String)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SubnetSearch.CreateSearchList(System.Text.RegularExpressions.Match)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.Internal.SubnetSearch.SetLowValue(System.String)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer">
            <summary>
            A class used to discover printers on an IP Network.
            </summary>
            <example><code source="../SdkApi_Card_Test/Test/Zebra/Sdk/Discovery/Examples/NetworkCardDiscovererExample.cs"/></example>
        </member>
        <member name="P:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.SetNetworkAdapterAddresses">
            <summary>
            Sets the list of network adapter addresses to be used during discovery.
            </summary>
            <remarks>If not specified, uses the default network adapter's address.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.SubnetSearch(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String)">
            <summary>
            Sends a discovery packet to the IP addresses specified in the <c>subnetRange</c>.
            </summary>
            <remarks>
            Subnet searches are defined by the first three subnet octets, followed by a range, such as 192.168.2. This method accepts IP addresses of the form, 
            assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.254 (will send a discovery packet to 192.168.2.254)</description></item>
            <item><description>192.168.2.* (will send a discovery packet for the range 192.168.2.1 - 192.168.2.254)</description></item>
            <item><description>192.168.2.8-* (will send a discovery packet for the range 192.168.2.8 - 192.168.2.254)</description></item>
            <item><description>192.168.2.37-42 (will send a discovery packet for the range 192.168.2.37 - 192.168.2.42)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="subnetRange">The subnet search range.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.SubnetSearch(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String,System.Int32)">
            <summary>
            Sends a discovery packet to the IP addresses specified in the <c>subnetRange</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses. 
            Subnet searches are defined by the first three subnet octets, followed by a range, such as 192.168.2. This method accepts IP 
            addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.254 (will send a discovery packet to 192.168.2.254)</description></item>
            <item><description>192.168.2.* (will send a discovery packet for the range 192.168.2.1 - 192.168.2.254)</description></item>
            <item><description>192.168.2.8-* (will send a discovery packet for the range 192.168.2.8 - 192.168.2.254)</description></item>
            <item><description>192.168.2.37-42 (will send a discovery packet for the range 192.168.2.37 - 192.168.2.42)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="subnetRange">The subnet search range.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.DirectedBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String)">
            <summary>
            Sends a directed broadcast discovery packet to the subnet specified by <c>ipAddress</c>.
            </summary>
            <remarks>
            Directed broadcasts are defined by the first three subnet octets, followed by 255, such as 192.168.2.255. This method 
            accepts IP addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.255</description></item>
            <item><description>192.168.2.1 (last octet will be replaced with 255)</description></item>
            <item><description>192.168.2 (will append 255 for the last octet)</description></item>
            <item><description>192.168.2. (will append 255 for the last octet)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="ipAddress">The IP address of the subnet.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.DirectedBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String,System.Int32)">
            <summary>
            Sends a directed broadcast discovery packet to the subnet specified by <c>ipAddress</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses. 
            Directed broadcasts are defined by the first three subnet octets, followed by 255, such as 192.168.2.255. This method accepts 
            IP addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.255</description></item>
            <item><description>192.168.2.1 (last octet will be replaced with 255)</description></item>
            <item><description>192.168.2 (will append 255 for the last octet)</description></item>
            <item><description>192.168.2. (will append 255 for the last octet)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="ipAddress">The IP address of the subnet.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.LocalBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <summary>
            Sends a local broadcast packet.
            </summary>
            <remarks>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.LocalBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32)">
            <summary>
            Sends a local broadcast packet.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses.<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <summary>
            This method will search the network using a combination of discovery methods to find printers on the network.
            </summary>
            <remarks>
            This is a convenience method that can be used as an alternative to the other discovery methods (e.g. multicast).<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String})">
            <summary>
            Sends a discovery request to the list of printer DNS names or IP addresses in <c>printersToFind</c>.
            </summary>
            <remarks>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="printersToFind">A list of IP addresses or DNS names for the printers to be discovered.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Discovery.NetworkCardDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Sends a discovery request to the list of printer DNS names or IP addresses in <c>printersToFind</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses.<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be cancelled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="printersToFind">A list of IP addresses or DNS names for the printers to be discovered.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.CheckForAlarm">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.ClearOcpDisplay(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetCardCount">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetMagneticEncoderConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetMediaInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetOcpDisplay">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetPrintCapability">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetPrinterInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetPrinterStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSensorStates">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSensorValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSmartCardConfigurations">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.HasLaminator">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.HasMagneticEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.HasSmartCardEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Reset">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SetOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.UpdateFirmware(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.UpdateFirmware(System.String,Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.EjectCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Cancel(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobList">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.PositionCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.PrintTemplate(System.Int32,Zebra.Sdk.Card.Containers.TemplateJob)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.PrintAndMagEncode(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.MagEncode(System.Int32,System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SmartCardEncode(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Reprint(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Resume">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.Destroy">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetAllJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetAllJobSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetJobSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsJobSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsJobSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsJobSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SetJobSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SetJobSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetAvailableSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.GetSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterA.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.GetInstance(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.GetZmotifPrinter(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.CreateZmotifPrinter(Zebra.Sdk.Card.Printer.ZebraCardPrinter)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.GetPrinterInstance(Zebra.Sdk.Comm.Connection,System.Nullable{Zebra.Sdk.Card.Enumerations.PrinterType})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.GetPrinterType(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.Internal.ZebraCardPrinterFactoryHelper.ThrowExecptionOnInvalidPrinterType(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Card.Enumerations.PrinterType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.ZebraCardPrinter">
            <summary>
            An interface used to obtain various properties of a Zebra card printer.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Printer.ZebraCardPrinter.Connection">
            <summary>
            Gets/sets the printer's connection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.ZebraCardPrinter.SetConnection(Zebra.Sdk.Comm.Connection)">
            <summary>
            Sets the printer connection.
            </summary>
            <param name="connection">The new printer connection.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If a communication error occurs.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.ZebraCardPrinterFactory">
            <summary>
            Creates a card printer object.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.ZebraCardPrinterFactory.GetInstance(Zebra.Sdk.Comm.Connection)">
            <summary>
            Factory method to create the correct <c>ZebraCardPrinter</c> concrete class based on the printer's type.
            </summary>
            <param name="connection">An open connection to a printer.</param>
            <returns>An instance of <c>ZebraCardPrinter</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.ZebraCardPrinterFactory.GetZmotifPrinter(Zebra.Sdk.Comm.Connection)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to a <c>ZebraPrinterZmotif</c> object from a <c>Connection</c> object.
            </summary>
            <param name="connection">An open connection to a printer.</param>
            <returns>An instance of <c>ZebraPrinterZmotif</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Printer.ZebraCardPrinterFactory.CreateZmotifPrinter(Zebra.Sdk.Card.Printer.ZebraCardPrinter)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to a <c>ZebraPrinterZmotif</c> object from a <c>ZebraCardPrinter</c> object.
            </summary>
            <param name="printer">Instance of <c>ZebraCardPrinter</c>.</param>
            <returns>An instance of <c>ZebraPrinterZmotif</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Printer.ZebraPrinterZmotif">
            <summary>
            Interface to ZMotif Series printers.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Printer.ZebraPrinterZmotif.SettingsHelper">
            <summary>
            Returns the <c>SettingsHelperUtilZmotif</c> object.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Card.Printer.ZebraPrinterZmotif.JobControlHelper">
            <summary>
            Returns the <c>JobControlHelperUtilZmotif</c> object.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetAvailableSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.GetSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Settings.Internal.SettingsUtilA.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Settings.ZebraCardSettingNames">
            <summary>
            Container class for common card printer device parameter key names.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.WIRED_MAC">
            <summary>
            Wired MAC address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.WIRED_DHCP">
            <summary>
            Wired DHCP enabled.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.WIRED_ADDRESS">
            <summary>
            Wired IP address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.WIRED_SUBNET">
            <summary>
            Wired subnet mask.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.WIRED_GATEWAY">
            <summary>
            Wired gateway address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.TOTAL_CARDS_PRINTED">
            <summary>
            Total cards printed.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.PRINTHEAD_RESISTANCE">
            <summary>
            Printhead resistance.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.MAG_X_OFFSET">
            <summary>
            Magnetic encoder x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.SMARTCARD_X_OFFSET">
            <summary>
            Smart card encoder x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.RIBBON_TYPE">
            <summary>
            Ribbon type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.RIBBON_DESCRIPTION">
            <summary>
            Ribbon description.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.RIBBON_OEM">
            <summary>
            Ribbon OEM code.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.RIBBON_INITIAL_SIZE">
            <summary>
            Ribbon initial size.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.RIBBON_PANELS_REMAINING">
            <summary>
            Ribbon panels remaining.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.CLEAN_X_CARD_PATH">
            <summary>
            Clean x-direction card path threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.LCD_CONTRAST">
            <summary>
            LCD contrast.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.INTERNAL_ENCODER_CONTACT_ENCODING">
            <summary>
            Internal smart card contact encoder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.INTERNAL_ENCODER_CONTACTLESS_ENCODER">
            <summary>
            Internal contactless smart card encoder.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.INTERNAL_ENCODER_SERIAL_NUMBER">
            <summary>
            Internal smart card encoder serial number.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Settings.ZebraCardSettingNames.PRINT_TYPE">
            <summary>
            Single or dual sided printing.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.NetworkUtils.StartSinglePrinterDiscovery(System.String,Zebra.Sdk.Card.Comm.Internal.SinglePrinterDiscoveryHandler)">
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.NetworkUtils.WaitForPrinterToGoOffline(Zebra.Sdk.Comm.Connection,System.Int32)">
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.NetworkUtils.TimeoutCheck(Zebra.Sdk.Comm.Connection,System.Int32)">
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.ReflectionUtil.GetClassesInNamespace(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.ReflectionUtil.GetClassesInNamespaceExtending(System.String,System.Type)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.ReflectionUtil.GetClasses(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.ReflectionUtil.Invoke_ApplyColorProfile(System.String,System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.FilterMap(System.String,System.Collections.Specialized.OrderedDictionary)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.FilterMap(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.FilterSettingsMap(System.String,System.Collections.Specialized.OrderedDictionary)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.FilterMap(System.String,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.SettingToParameterInfo(Zebra.Sdk.Settings.Setting)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Utilities.Internal.Utilities.RemoveFromSettingsMap(System.String,System.Collections.Specialized.OrderedDictionary)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetDeviceInfo(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCapabilitiesInfo(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetMediaInfo(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetDeviceInfo(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError,System.Boolean,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetMediaInfo(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.IsDeviceInSession(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.IsDeviceInSession(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.IsDeviceInSession(System.Int32[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SendConfiguration(System.String,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCapabilities(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.CalculateWirelessKey(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GenerateWirelessKey(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.CheckForWireless(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetWirelessAccessPoints(System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetMemory(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetNonce(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.BuildAuthenticationCode(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetDeviceSensorValues(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetDeviceSensorStates(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetLaminatorSensorValues(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetLaminatorSensorStates(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetWirelessStatus(System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetGeneralStatus(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetLog(Zebra.Sdk.Card.Enumerations.LogType,System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetSecurityFlags(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetResponseHeader(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetOcpDisplay(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.BuildOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo,System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCardTypes(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SetCardType(System.Int32,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.IsZCSeriesPrinter">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SetCardType(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.HasLaminator(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.HasBarcodeReader(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.HasMagneticEncoder(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SetDefaultCardDestination(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetLaminateInfo(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetJobStatus(System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetJobList(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetMagCoercivityFromCardType(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCardType(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.JobCompleted(System.Int32,System.Boolean,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetData(System.Int32,Zebra.Sdk.Card.Enumerations.DataSource,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.CheckForSmartCard(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.HasContactlessEncoder(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.HasContactEncoder(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SetCurrentTime(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SetClock(System.DateTime,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetI2CStats(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCalibrationLutData(Zebra.Sdk.Card.Enumerations.CalibrationTable,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetCardInformation(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetAllSettings(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GetTotalCardCount(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.BuildJobControl(Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl,Zebra.Sdk.Card.Zmotif.Comm.Internal.SecurityInfo,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.BuildJobStatusInfo(System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.WaitForZmotifFwLoadToComplete(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Card.Printer.CardPrinterReconnectionHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.TimeoutCheck(Zebra.Sdk.Comm.Connection,System.Int64,System.Int64)">
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.CheckForError(Zebra.Sdk.Card.Comm.Internal.CardError,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GenerateException(System.Int32,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.ThrowOnNoMagEncoder(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.SaveLaminatorParameters">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.LoadLaminatorParameters">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.WaitForDiagnosticOperationToComplete(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.BuildHttpCmd(System.Byte,System.Byte,System.Byte[])">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.HttpAppendCommand(System.Byte,System.Byte,System.Text.StringBuilder)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.SendCmdAndReadBuffer(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.CommandHeader,System.Byte[],System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.SendCmdAndReadBuffer(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.CommandHeader,System.Byte[],System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError,Zebra.Sdk.Device.ProgressMonitor)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ReadResponseHeader(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ResponseHeader@,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Text.DecoderFallbackException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ReadResponseHeader(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ResponseHeader@,Zebra.Sdk.Card.Comm.Internal.CardError,System.Boolean)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Text.DecoderFallbackException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.BuildRespHeader(System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ResponseHeader@)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ParseHttpHeaderData(System.String,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ResponseHeader@)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.VerifyResponseHeader(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.CommandHeader,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ResponseHeader,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.BuildCmdHeader(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.CommandHeader)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetPrinterId(System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetStatus(System.Int32,System.Byte[],System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetConfiguration(System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.SetConfiguration(System.Byte[],System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetCapabilities(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetLog(System.Int32,System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.DeviceControl(System.Byte[],System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ClearError(System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.NvmBackup(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetOcpDisplay(System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.DisplayOcpMessage(System.Byte[],System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ProcessControl(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.TestPrint(System.Byte,System.Int32,System.Int32,System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ReserveDevice(System.Int32,System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Reset(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.ReprintLast(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetData(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetCalibrationLutData(Zebra.Sdk.Card.Enumerations.CalibrationTable,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.GetNonce(Zebra.Sdk.Card.Zmotif.Enumerations.Internal.ZMCSecureActionType,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response@,Zebra.Sdk.Card.Comm.Internal.CardError@)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.CancelAction(System.Int32,System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.WriteData(System.Byte,System.Byte[],System.Int32,System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.WriteData(System.Byte,System.Byte[],System.Int32,System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError,Zebra.Sdk.Device.ProgressMonitor)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.StartAction(System.Int32,System.Byte[],System.Int32,System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.BeginJob(System.Boolean,System.Int16,System.Int16,System.Byte[],System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.SendGraphics(System.Byte,System.Int16,System.Int16,Zebra.Sdk.Card.Enumerations.GraphicType,System.Byte[],System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.EndJob(System.Byte,System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.EndAction(System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.BuildZMJCmdHdr(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.CloseSocket">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetStatus(System.Int32,Zebra.Sdk.Card.Zmotif.Enumerations.Internal.ZMCGetStatus,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.SetConfiguration(System.Byte[],System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.DeviceControl(System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetLog(Zebra.Sdk.Card.Enumerations.LogType,System.Boolean,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.ClearError(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.NvmBackup(System.Int32,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetOcpDisplay(System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.DisplayOcpMessage(System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.ProcessControlCmd(System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.TestPrint(System.Byte,System.Int32,System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.DeviceReservation(System.Int32,System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.Reset(System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.Reprint(System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.CancelAction(System.Int32,System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetData(Zebra.Sdk.Card.Enumerations.DataSource,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetCalibrationLutData(Zebra.Sdk.Card.Enumerations.CalibrationTable,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GetNonce(Zebra.Sdk.Card.Zmotif.Enumerations.Internal.ZMCSecureActionType,System.Byte[]@,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.StartAction(System.Boolean,System.Int32,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Text.EncoderFallbackException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.BeginJob(System.Int32,System.Int16,System.Byte[],System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.SendGraphics(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.GraphicsData,System.Int16,System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.WriteData(System.Byte,System.Int32,System.Byte[],Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError,Zebra.Sdk.Device.ProgressMonitor)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.EndJob(System.Boolean,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn.EndAction(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif">
            <summary>
            Interface to ZMotif printer utility functions.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.ClearError">
            <summary>
            Clears the printer error and returns the printer alarm information.
            </summary>
            <returns>The alarm information.</returns>
            <ul><li>Refer to <see cref="T:Zebra.Sdk.Card.Errors.ZebraCardErrors"/> for a list of error codes and descriptions</li></ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.ClearRejectBinCounter">
            <summary>
            Clears the printer's reject bin counter.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an issue clearing the reject bin count.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetAvailableCardTypes">
            <summary>
            Queries the printer and returns the available card types.
            </summary>
            <returns>A <c>List</c> of supported card types.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the available card types.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetCardTypeInformation(System.String)">
            <summary>
            Queries the printer and returns the card type information for specified card type.
            </summary>
            <param name="cardType">The card type.</param>
            <returns>The card specific information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the card type information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>cardType</c> specified is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetAvailableMemory">
            <summary>
            Queries the printer and returns the memory available for job storage.
            </summary>
            <returns>The printer's available memory.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the available memory.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetLog(Zebra.Sdk.Card.Enumerations.LogType,System.Boolean)">
            <summary>
            Queries the printer and returns the specified log.
            </summary>
            <param name="logType">The type of log.</param>
            <param name="clearLog">True to clear the <see cref="F:Zebra.Sdk.Card.Enumerations.LogType.Events"/> log.</param>
            <returns>The log in XML form.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetWirelessRadioStatus">
            <summary>
            Queries the printer and returns the Wireless Radio Status.
            </summary>
            <returns>A <c>Dictionary</c> containing the wireless radio status information.</returns>
            <ul>
            <li>Key = Wireless Radio Setting</li>
            <li>Value = Setting value</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the wireless radio status.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.GetWirelessStatus">
            <summary>
            Queries the printer and returns the Wireless Status.
            </summary>
            <returns>A <c>Dictionary</c> containg the wireless status information.</returns>
            <ul>
            <li>Key = Wireless Setting</li>
            <li>Value = Setting value</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the wireless status.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.ScanWirelessAccessPoints(System.Int32)">
            <summary>
            Gets the Access points discoverable by printer.
            </summary>
            <param name="scanIterations">Number of scan iterations.</param>
            <returns>A <c>List</c> of available <c>WirelessAccessPointInfo</c> objects.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the available access points.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.ResumeFromStandby">
            <summary>
            Resumes the printer from standby.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.HasBarcodeReader">
            <summary>
            Queries the printer's configuration and returns true if the printer's configuration includes a barcode reader.
            </summary>
            <returns>True if the printer is configured with a barcode reader.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the barcode reader information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.IsHostAuthenticationEnabled">
            <summary>
            Returns whether host authentication mode is enabled.
            </summary>
            <returns>True if host authentication is enabled.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.IsEncryptionEnabled">
            <summary>
            Returns whether encryption is enabled on the printer.
            </summary>
            <returns>True if encryption is enabled.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.DeviceUtilZmotif.ResetNetwork">
            <summary>
            Sends the network reset command to the printer.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there is an error retrieving the printer information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.#ctor(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.Init(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.CheckForAlarm">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.ClearOcpDisplay(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetCardCount">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetPrinterInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetMagneticEncoderConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetMediaInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetOcpDisplay">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetSensorStates">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetSensorValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetSmartCardConfigurations">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetPrinterStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.Reset">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.SetOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.UpdateFirmware(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.UpdateFirmware(System.String,Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.HasMagneticEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.HasSmartCardEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.GetPrintCapability">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.HasLaminator">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.CheckFwUpdateStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.ReadFileData(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.BuildMediaInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.ThrowOnZCSeriesPrinterModel(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDevice.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ClearError">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ClearRejectBinCounter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetAvailableCardTypes">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetCardTypeInformation(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetAvailableMemory">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetLog(Zebra.Sdk.Card.Enumerations.LogType,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetWirelessRadioStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.GetWirelessStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ScanWirelessAccessPoints(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ResumeFromStandby">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.HasBarcodeReader">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.IsHostAuthenticationEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.IsEncryptionEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ResetNetwork">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ThrowOnNonZCSeriesPrinterModel(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifDeviceUtilImpl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.CalibrateLaminate">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorCardCount">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorSensorStates">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorSensorValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.RestoreLaminatorDefaultConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.GetLaminatorOdometerValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.Internal.ZmotifLaminatorUtilImpl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif">
            <summary>
            Interface for laminator utility functions.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.CalibrateLaminate">
            <summary>
            Calibrates the Laminator.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while calibrating the laminator.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or laminate installed or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorCardCount">
            <summary>
            Returns the laminator's card count.
            </summary>
            <returns>A <c>LaminatorCardCountInfo</c> instance populated with the laminator's card count information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs retrieving the laminator card count information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorInformation">
            <summary>
            Returns the laminator's device specific information.
            </summary>
            <returns>A <c>LaminatorInfo</c> instance populated with the laminator's device information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while calibrating the laminator.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorSensorStates">
            <summary>
            Returns the sensor names and states.
            </summary>
            <remarks>
            <ul>
            <li>Key = Sensor name</li>
            <li>Value = Sensor state></li>
            </ul>
            </remarks>
            <returns>A <c>Dictionary</c> object containing the sensor names and their states.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs retrieving the sensor states.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorSensorValues">
            <summary>
            Returns the sensor names and values.
            </summary>
            <remarks>
            <ul>
            <li>Key = Sensor name</li>
            <li>Value = Sensor value></li>
            </ul>
            </remarks>
            <returns>A <c>Dictionary</c> object containing the sensor names and their values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs retrieving the sensor values.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorStatus">
            <summary>
            Returns the laminator's current status.
            </summary>
            <returns>Laminator status.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs retrieving the laminator's status.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.RestoreLaminatorDefaultConfiguration">
            <summary>
            Restores the laminator's settings to their default configuration values.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs restoring the laminator's default configuration values.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Device.LaminatorUtilZmotif.GetLaminatorOdometerValues">
            <summary>
            Returns the odometer names and values.
            </summary>
            <remarks>
            <ul>
            <li>Key = Odometer name</li>
            <li>Value = Odometer value></li>
            </ul>
            </remarks>
            <returns>A <c>Dictionary</c> object containing the odometer names and their values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs retrieving the odometer values.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a laminator or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.XmlDecodeData(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.XmlEncodeData(System.Int32,Zebra.Sdk.Card.Containers.MagTrackData)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidateWirelessParameters(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidateSecurityAndCryptoTypes(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidateWirelessKey(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.VerifyCardDestination(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidateMagEncoderType(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidateMagEncodingData(Zebra.Sdk.Card.Enumerations.MagEncodingType,Zebra.Sdk.Card.Containers.MagTrackData)">
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Internal.ZmotifValidatorUtil.ValidatePrintType(System.String,Zebra.Sdk.Card.Enumerations.PrintType,System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.Cancel(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.EjectCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.GetJobList">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.GetJobStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.PositionCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.PrintTemplate(System.Int32,Zebra.Sdk.Card.Containers.TemplateJob)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.PrintAndMagEncode(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.MagEncode(System.Int32,System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.Reprint(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.Resume">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.SmartCardEncode(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.BuildGraphicsData(System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMCBase.Response,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.EncryptGraphicsData(System.Int32)">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.PopulateGraphicsData(Zebra.Sdk.Card.Containers.GraphicsInfo,System.Int16,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.AddGraphicsJobData(Zebra.Sdk.Card.Containers.GraphicsInfo,System.Int16,System.Int32,System.Int32)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.PopulateJobData(System.Int32,Zebra.Sdk.Card.Zmotif.Enumerations.Internal.JobType,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},Zebra.Sdk.Card.Comm.Internal.CardError,Zebra.Sdk.Card.Containers.MagTrackData)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.AddGraphicsJobData(Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl,Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.PrintType,System.String,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.AddSmartCardJobData(Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.ConvertAndValidateTrackData(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},System.String,System.String,System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.GenerateTemplateJobSettingsMap(Zebra.Sdk.Card.Containers.TemplateJob,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.IsSmartCardJobConfigured(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.GetFillColor(Zebra.Sdk.Card.Containers.GraphicsInfo,System.String)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJob.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.#ctor(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn,Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.Init(Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn,Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetSettings">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetAllJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetAllJobSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetJobSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetJobSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetJobSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetJobSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.IsJobSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.IsJobSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.IsJobSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.SetJobSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.SetJobSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.GetSettingById(System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.SetSettingById(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.SetSettingValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.UpdateInternalState(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ResetJobSettings">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ReadSettingsLut">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ValidateMagneticEncoderSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ValidateSmartCardContactSetting(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ValidateSmartCardContactlessSetting(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.HostAuthenticationKey">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.EncryptionKey">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetCardThickness">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetCardThickness(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetCardType">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetCardType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetCardType(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetColorPreheatLevel">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetColorPreheatLevel(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetImageSharpening(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetImageSharpeningLevel(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.SharpeningLevel)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetKPanelOptimization(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetKPanelOptimization(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.KOptimizationType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetKPreheatLevel(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetKPreheatLevel(Zebra.Sdk.Card.Enumerations.CardSide,System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagDataFormat">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagDataFormat(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.DataFormat})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.IsOcpReprintEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetEnableOcpReprint(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.IsKPanelOverwriteEnabled(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetKPanelOverwrite(Zebra.Sdk.Card.Enumerations.CardSide,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetPrintOptimizationMode">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetPrintOptimizationMode(Zebra.Sdk.Card.Enumerations.PrintOptimizationMode)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetCardDestination">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetCardDestination(Zebra.Sdk.Card.Enumerations.CardDestination)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetCardSource">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetCardSource(Zebra.Sdk.Card.Enumerations.CardSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetDataSource">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetDataSource(Zebra.Sdk.Card.Enumerations.DataSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetImageOrientationType(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetImageOrientation(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.OrientationType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetImageRotation(Zebra.Sdk.Card.Enumerations.CardSide)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetImageRotation(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.ImageRotation)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagEncodingType">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagEncodingType(Zebra.Sdk.Card.Enumerations.MagEncodingType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagEncodingType(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.MagEncodingType})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagCoercivity">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagCoercivity(Zebra.Sdk.Card.Enumerations.CoercivityType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagTrackDensity">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagTrackDensity(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagSentinelFormat">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagSentinelFormat(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Containers.MagSentinel})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagBitsPerCharacter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagBitsPerCharacter(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.GetMagDataParity">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagDataParity(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.DataCharParity})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.IsDeleteAfterEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetDeleteAfter(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.IsMagEraseEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.IsMagVerificationEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagErase(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagVerification(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetJobConfiguration(Zebra.Sdk.Card.Containers.JobConfigInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetMagConfiguration(Zebra.Sdk.Card.Containers.MagConfigInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SetSmartCardConfigurations(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.BuildMagDensityMap(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.BuildMagSentinelMap(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Containers.MagSentinel})">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.BuildMagBitsPerCharacterMap(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.BuildMagDataParityMap(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.DataCharParity})">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobControlUtilImpl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.Abort(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.Reject">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.GetReservationStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ReleaseDeviceReservation(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ReserveDevice(Zebra.Sdk.Card.Enumerations.ReservationType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ReadBarcodeData">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.RetrySmartCard(Zebra.Sdk.Card.Enumerations.SmartCardType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.PrintTestCard(System.Byte,System.Int32,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.GetTestPrintImageNames">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.PrintTestCard(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ThrowOnZCSeriesPrinterModel(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ThrowOnNonZCSeriesPrinterModel(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.IsValidTestCardImageName(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.GetTestCardImageNames(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobUtilImpl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif">
            <summary>
            Interface for configuring job related parameters.
            </summary>
            <remarks>All job settings must be set separately for each job.</remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.HostAuthenticationKey">
            <summary>
            Sets the 16 byte host authentication key used when sending a job to the printer.
            </summary>
            <remarks>
            <ul>
            <li>Host authentication option must be pre-configured on the printer.</li>
            </ul>
            </remarks>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the host authentication key is invalid.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.EncryptionKey">
            <summary>
            Sets the 16 byte encryption used to encrypt job data between the printer and host.
            </summary>
            <remarks>
            <ul>
            <li>Encryption option must be pre-configured on the printer.</li>
            </ul>
            </remarks>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the encryption key is invalid.</exception>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.EncryptJobControlData">
            <summary>
            Indicates whether the job control data should be encrypted using the provided <see cref="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.EncryptionKey"/>.
            </summary>
            <remarks>
            <ul>
            <li>Encryption option must be pre-configured on the printer.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.EncryptGraphicsData">
            <summary>
            Indicates whether the job's graphics data should be encrypted using the provided <see cref="P:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.EncryptionKey"/>.
            </summary>
            <remarks>
            <ul>
            <li>Encryption option must be pre-configured on the printer.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetJobConfiguration(Zebra.Sdk.Card.Containers.JobConfigInfo)">
            <summary>
            Method for configuring the current print job.
            </summary>
            <param name="configInfo">Instance containing details of the job to be printed.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetCardThickness">
            <summary>
            Returns the card thickness in mils.
            </summary>
            <returns>The card thickness in mils.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist, is invalid, the device is busy, or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetCardThickness(System.Int32)">
            <summary>
            Sets the thickness of the card to be used.
            </summary>
            <param name="mils">The card thickness in mils.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetCardType">
            <summary>
            Returns the currently selected card type.
            </summary>
            <returns>The current card type.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the card type.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetCardType(System.String)">
            <summary>
            Sets the card type to be used for the job.
            </summary>
            <param name="cardType">The name of the card type.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetColorPreheatLevel">
            <summary>
            Returns the preheat level for the color panels.
            </summary>
            <returns>The color panels preheat level.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there was an error parsing the response from the printer or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetColorPreheatLevel(System.Int32)">
            <summary>
            Sets the color panel preheat level.
            </summary>
            <param name="preheatLevel">The preheat level.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetImageSharpening(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns the image sharpening level to be used on the specified side of the card.
            </summary>
            <param name="side">The card side.</param>
            <returns>The sharpening level for the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there was an error parsing the response from the printer or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetImageSharpeningLevel(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.SharpeningLevel)">
            <summary>
            Sets the image sharpening level to be used on the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <param name="sharpeningLevel">The level of sharpening to apply to the image data.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetKPanelOptimization(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns the selected monochrome panel optimization type for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <returns>The monochrome optimization type for the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there was an error parsing the response from the printer or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetKPanelOptimization(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.KOptimizationType)">
            <summary>
            Sets the monochrome optimization mode for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <param name="optimizationType">The monochrome optimization type.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetKPreheatLevel(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns the current monochrome preheat level for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <returns>The monochrome monochrome panels preheat level for the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there was an error parsing the response from the printer or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetKPreheatLevel(Zebra.Sdk.Card.Enumerations.CardSide,System.Int32)">
            <summary>
            Sets the monochrome preheat level for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <param name="level">The monochrome preheat level.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagConfiguration(Zebra.Sdk.Card.Containers.MagConfigInfo)">
            <summary>
            Method for configuring settings for a magnetic encoding job.
            </summary>
            <param name="configInfo">Instance containing details of the magnetic encoding job to perform.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagDataFormat">
            <summary>
            Returns the magnetic encoding data format for each track.
            </summary>
            <returns>Dictionary object containing the individual track <c>DataFormat</c> values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If there was an error parsing the response from the printer or a magnetic encoder is not currently installed.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagDataFormat(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.DataFormat})">
            <summary>
            Sets the magnetic encoding data format for each track contained in the specified <c>Dictionary</c> object.
            </summary>
            <param name="dataFormat">A <c>Dictionary</c> object containing an entry for each track with the desired <c>DataFormat</c>.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The data format for magnetic encoding.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.IsOcpReprintEnabled">
            <summary>
            Returns whether the OCP reprint button is enabled.
            </summary>
            <returns>True if enabled.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the OCP reprint button value.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetEnableOcpReprint(System.Boolean)">
            <summary>
            Sets whether or not the OCP Reprint button will be enabled.
            </summary>
            <param name="enable">True to enable.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.IsKPanelOverwriteEnabled(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns whether or not monochrome panel overwrite has been selected for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <returns>True if monochrome panel overwrite has been selected for the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetKPanelOverwrite(Zebra.Sdk.Card.Enumerations.CardSide,System.Boolean)">
            <summary>
            Specifies whether the monochrome panel overwrite should be performed for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <param name="enable">True to enable monochrome panel overwriting.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetPrintOptimizationMode">
            <summary>
            Gets the print optimization mode.
            </summary>
            <remarks>For ZMotif Series 9 printers only.</remarks>
            <returns>The print optimization mode for ZMotif Series 9 model printers.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist, the device is busy, or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetPrintOptimizationMode(Zebra.Sdk.Card.Enumerations.PrintOptimizationMode)">
            <summary>
            Sets the print optimization mode.
            </summary>
            <remarks>For ZMotif Series 9 printers only.</remarks>
            <param name="optimizationMode">The print optimization mode for ZMotif Series 9 model printers.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist, is invalid, the device is busy, or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetCardDestination">
            <summary>
            Returns the current card destination location.
            </summary>
            <returns>The card destination location.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the card destination.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetCardDestination(Zebra.Sdk.Card.Enumerations.CardDestination)">
            <summary>
            Sets the card destination for the current job.
            </summary>
            <param name="destination">The card destination location.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetCardSource">
            <summary>
            Returns the current card source location.
            </summary>
            <returns>The card source location.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the card source.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetCardSource(Zebra.Sdk.Card.Enumerations.CardSource)">
            <summary>
            Sets the card source for the current job.
            </summary>
            <param name="cardSource">The card source location.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetDataSource">
            <summary>
            Returns the selected data source(s) to be used during a read job.
            </summary>
            <returns>DataSource enumeration for the specified magnetic read operation.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the data source.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetDataSource(Zebra.Sdk.Card.Enumerations.DataSource)">
            <summary>
            Sets the data source(s) to be used during a read job.
            </summary>
            <param name="dataSource">DataSource enumeration for the specified magnetic read operation.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetImageOrientationType(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns the selected image orientation for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <returns>The image orientation for the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the image orientation value.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetImageOrientation(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.OrientationType)">
            <summary>
            Sets the image orientation for the specified card side for the current job.
            </summary>
            <param name="side">The card side.</param>
            <param name="orientation">The orientation to be applied to the specified card side.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetImageRotation(Zebra.Sdk.Card.Enumerations.CardSide)">
            <summary>
            Returns the selected image orientation for the specified card side.
            </summary>
            <param name="side">The card side.</param>
            <returns>The image rotation value to be applied to the specified card side.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the image rotation value.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetImageRotation(Zebra.Sdk.Card.Enumerations.CardSide,Zebra.Sdk.Card.Enumerations.ImageRotation)">
            <summary>
            Sets the image rotation type for the specified card side for the current job.
            </summary>
            <param name="side">The card side.</param>
            <param name="rotation">The rotation to be applied to the specified card side.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagEncodingType">
            <summary>
            Returns the current type of magnetic encoding to perform.
            </summary>
            <returns>The type of magnetic encoding to perform.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magentic encoding type.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagEncodingType(Zebra.Sdk.Card.Enumerations.MagEncodingType)">
            <summary>
            Sets the type of magnetic encoding to perform for the current job.
            </summary>
            <param name="encodingType">The type of magnetic encoding to perform.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagEncodingType(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.MagEncodingType})">
            <summary>
            Sets the magnetic encoding type for each track contained in the specified <c>Dictionary</c> object.
            </summary>
            <param name="encodingType">A <c>Dictionary</c> object containing an entry for each track with the desired <c>MagEncodingType</c>.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The magentic encoding type.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagCoercivity">
            <summary>
            Returns the current coercivity type for magnetic encoding.
            </summary>
            <returns>The coercivity type to be used for magnetic encoding.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magentic coercivity type.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagCoercivity(Zebra.Sdk.Card.Enumerations.CoercivityType)">
            <summary>
            Sets the magnetic encoding coercivity type for the current job.
            </summary>
            <param name="coercivity">The coercivity type to be used for magnetic encoding.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagTrackDensity">
            <summary>
            Gets the density value for each track.
            </summary>
            <returns>A <c>Dictionary</c> object containing the density value for each <c>TrackNumber</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic track density.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagTrackDensity(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <summary>
            Sets the density value for each supplied track number for the current job.
            </summary>
            <param name="densityFormat">A <c>Dictionary</c> object containing the density value for each <c>TrackNumber</c>.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The density value.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagSentinelFormat">
            <summary>
            Gets the sentinel format values for each track.
            </summary>
            <returns>A <c>Dictionary</c> oject containing the MagSentinel information for each <c>TrackNumber</c>.</returns>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The track sentinel configuration.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic track sentinel formats.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagSentinelFormat(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Containers.MagSentinel})">
            <summary>
            Sets the sentinel formats for each supplied track for the current job.
            </summary>
            <param name="sentinelFormat">A <c>Dictionary</c> object containing the MagSentinel information for each <c>TrackNumber</c>.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The track sentinel configuration.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagBitsPerCharacter">
            <summary>
            Returns the bits per character for each track number.
            </summary>
            <returns>A <c>Dictionary</c> object containing the bits per character for each <c>TrackNumber</c>.</returns>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The magnetic bits per character.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic bits per character.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagBitsPerCharacter(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,System.Int32})">
            <summary>
            Sets the bits per character for each track.
            </summary>
            <param name="bitsPerCharFormat">A <c>Dictionary</c> object containing the bits per character for each <c>TrackNumber</c>.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The magnetic bits per character.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.GetMagDataParity">
            <summary>
            Gets the data parity for each track.
            </summary>
            <returns>A <c>Dictionary</c> object containing the <c>TrackNumber</c> and <c>DataCharParity</c> for each track.</returns>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The data character parity for magnetic encoding.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic data parity.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagDataParity(System.Collections.Generic.Dictionary{Zebra.Sdk.Card.Enumerations.TrackNumber,Zebra.Sdk.Card.Enumerations.DataCharParity})">
            <summary>
            Sets the data character parity for each track for the current job.
            </summary>
            <param name="parity">A <c>Dictionary</c> object containing the <c>TrackNumber</c> and <c>DataCharParity</c> for each track.</param>
            <ul>
            <li>Key = The track of the magnetic card to be written to/read from.</li>
            <li>Value = The data character parity for magnetic encoding.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.IsDeleteAfterEnabled">
            <summary>
            Returns whether the image data will be deleted following a completed job.
            </summary>
            <returns>True if the image data will be deleted.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetDeleteAfter(System.Boolean)">
            <summary>
            Specifies whether the image data should be deleted following the current job completion.
            </summary>
            <param name="enable">True to delete the image data follwoing a completed job.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.IsMagEraseEnabled">
            <summary>
            Returns whether magnetic encoding erase should be performed.
            Only for ZC printer models    
            </summary>
            <returns>True if the magnetic erase is enabled.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.IsMagVerificationEnabled">
            <summary>
            Returns whether magnetic encoding write verification should be performed.
            </summary>
            <returns>True if the magnetic verification is enabled.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetMagVerification(System.Boolean)">
            <summary>
            Specifies whether magnetic encoding write verification should be performed for the current job.
            </summary>
            <param name="enable">True to verify the magnetic encoding.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobControlHelperUtilZmotif.SetSmartCardConfigurations(System.Collections.Generic.List{System.String})">
            <summary>
            Configures smart card encoding for the current job.
            </summary>
            <param name="smartCardTypes">A <c>List</c> of smart card types for configuring a smart card encoding job.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif">
            <summary>
            Interface for job related tasks and information.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.Abort(System.Boolean)">
            <summary>
            Aborts a print job.
            </summary>
            <param name="reject">True = abort the job and send the card to the reject bin. False = abort the job and hold the card in the printer's home position.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.Reject">
            <summary>
            Rejects a card from the printer's home position.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.GetReservationStatus(System.Int32)">
            <summary>
            Queries the printer and returns the current status of the printer from the supplied reservation token. 
            </summary>
            <remarks>Must be polled at a minimum rate of once per minute with the returned reservation token to keep the reservation active.</remarks>
            <param name="reservationToken">The reservation token for the status query. Specify '0' for the <c>reservationToken</c> to query whether the printer is currently in session.</param>
            <returns>A <c>ReservationInfo</c> instance containing the status of the requested device reservation token.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>reservationToken</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.ReleaseDeviceReservation(System.Int32)">
            <summary>
            Releases the reservation session associated with the reservationToken.
            </summary>
            <param name="reservationToken">The printer supplied resrevation token.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>reservationToken</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.ReserveDevice(Zebra.Sdk.Card.Enumerations.ReservationType)">
            <summary>
            Requests a reservation to a shared printer.
            </summary>
            <param name="reservationType">The type of reservation to request.</param>
            <returns>A request specific reservation token.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.ReadBarcodeData">
            <summary>
            Sends a job to the printer to scan and return the barcode data from a card.
            </summary>
            <returns>A <c>BarcodeData</c> object containing the barcode type and data read from the card.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while reading the barcode data.</exception>
            <exception cref="T:System.TimeoutException">If the operation times out.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an error occurs while building the job.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.RetrySmartCard(Zebra.Sdk.Card.Enumerations.SmartCardType)">
            <summary>
            Repositions a smart card that is already present at the encoder.
            </summary>
            <param name="smartCardType">The smart card type.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while repositioning the smart card.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the <c>smartCardType</c> is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.PrintTestCard(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Prints the specified test image.
            </summary>
            <remarks>For ZMotif series 7, 8, and 9 printers only.</remarks>
            <param name="imageNumber">The test print image number.</param>
            <param name="copies">The number of copies to print.</param>
            <param name="dualSided">True to print the test image dual sided.</param>
            <returns>The ID value assigned to the job.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the specified arguments are invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.GetTestPrintImageNames">
            <summary>
            Queries the printer and returns a list of available test print image names.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
            <returns>A <c>List</c> of the available test print image names.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the test print image names.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.PrintTestCard(System.String)">
            <summary>
            Prints the specified test image.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
            <param name="testPrintName">The test print image name.</param>
            <ul><li>Use <see cref="M:Zebra.Sdk.Card.Zmotif.Job.JobUtilZmotif.GetTestPrintImageNames"/> to retrieve the list of available test print image names.</li></ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is a error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the printer information.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or a printer error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If any of the specified arguments are invalid.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif">
            <summary>
            Container class for ZMotif Series card printer job parameter key names.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.CARD_TYPE">
            <summary>
            Card type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.CARD_THICKNESS">
            <summary>
            Card thickness.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.OCP_REPRINT">
            <summary>
            OCP reprint.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.COLOR_PREHEAT">
            <summary>
            The amount of baseline energy used on the non-printed (white areas) of the card for YMC printing.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.ORIENTATION_FRONT">
            <summary>
            Orientation front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.ROTATION_FRONT">
            <summary>
            Rotation front
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.K_OVERWRITE_FRONT">
            <summary>
            Monochrome overwrite front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.K_PREHEAT_FRONT">
            <summary>
            The amount of baseline energy used on the non-printed (white areas) of the card for front side monochrome printing.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.SHARPENING_FRONT">
            <summary>
            Sharpening front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.ORIENTATION_BACK">
            <summary>
            Orientation back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.ROTATION_BACK">
            <summary>
            Rotation back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.K_OVERWRITE_BACK">
            <summary>
            Monochrome overwrite back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.K_PREHEAT_BACK">
            <summary>
            The amount of baseline energy used on the non-printed (white areas) of the card for back side monochrome printing.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.SHARPENING_BACK">
            <summary>
            Sharpening back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_ENCODING_TYPE">
            <summary>
            Magnetic track 1 encoding type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_FORMAT">
            <summary>
            Magnetic track 1 data format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_BITS">
            <summary>
            Magnetic track 1 bits per character.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_PARITY">
            <summary>
            Magnetic track 1 data parity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_SENTINEL_START">
            <summary>
            Magnetic track 1 start sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_SENTINEL_END">
            <summary>
            Magnetic track 1 end sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_SENTINEL_FORMAT">
            <summary>
            Magnetic track 1 sentinel format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_LEADING_ZEROS">
            <summary>
            Magnetic track 1 leading zeros for start sentinel positioning.
            </summary>
            <remarks>
            Specifies the number of leading zeros from the edge of the card.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_OFFSET">
            <summary>
            Magnetic track 1 start sentinel offset (mm).
            </summary>
            <remarks>
            For ZC Series printers only.<br/><br/>
            Specifies the position of the start sentinel from the edge of the card.<br/>
            The <c>MAG_TRACK_1_LEADING_ZEROS</c> setting is recalculated from the offset and density parameters.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_1_LRC_PARITY">
            <summary>
            Magnetic track 1 LRC character parity.
            </summary>
            <remarks>ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_ENCODING_TYPE">
            <summary>
            Magnetic track 2 encoding type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_FORMAT">
            <summary>
            Magnetic track 2 format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_BITS">
            <summary>
            Magnetic track 2 bits per character.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_PARITY">
            <summary>
            Magnetic track 2 data parity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_SENTINEL_START">
            <summary>
            Magnetic track 2 start sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_SENTINEL_END">
            <summary>
            Magnetic track 2 end sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_SENTINEL_FORMAT">
            <summary>
            Magnetic track 2 sentinel format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_LEADING_ZEROS">
            <summary>
            Magnetic track 2 leading zeros for start sentinel positioning.
            </summary>
            <remarks>
            Specifies the number of leading zeros from the edge of the card.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_OFFSET">
            <summary>
            Magnetic track 2 start sentinel offset (mm).
            </summary>
            <remarks>
            For ZC Series printers only.<br/><br/>
            Specifies the position of the start sentinel from the edge of the card.<br/>
            The <c>MAG_TRACK_2_LEADING_ZEROS</c> setting is recalculated from the offset and density parameters.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_2_LRC_PARITY">
            <summary>
            Magnetic track 2 LRC character parity.
            </summary>
            <remarks>ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_ENCODING_TYPE">
            <summary>
            Magnetic track 3 encoding type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_FORMAT">
            <summary>
            Magnetic track 3 format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_BITS">
            <summary>
            Magnetic track 3 bits per character.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_PARITY">
            <summary>
            Magnetic track 3 data parity.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_SENTINEL_START">
            <summary>
            Magnetic track 3 start sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_SENTINEL_END">
            <summary>
            Magnetic track 3 end sentinel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_SENTINEL_FORMAT">
            <summary>
            Magnetic track 3 sentinel format.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_LEADING_ZEROS">
            <summary>
            Magnetic track 3 leading zeros for start sentinel positioning.
            </summary>
            <remarks>
            Specifies the number of leading zeros from the edge of the card.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_OFFSET">
            <summary>
            Magnetic track 3 start sentinel offset (mm).
            </summary>
            <remarks>
            For ZC Series printers only.<br/><br/>
            Specifies the position of the start sentinel from the edge of the card.<br/>
            The <c>MAG_TRACK_3_LEADING_ZEROS</c> setting is recalculated from the offset and density parameters.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Job.ZebraCardJobSettingNamesZmotif.MAG_TRACK_3_LRC_PARITY">
            <summary>
            Magnetic track 3 LRC character parity.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.#ctor(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetConnection(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.CheckForAlarm">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ClearOcpDisplay(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetCardCount">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetMagneticEncoderConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetOcpDisplay">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetPrinterInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetPrinterStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetMediaInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSensorStates">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSensorValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSmartCardConfigurations">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Reset">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.UpdateFirmware(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.UpdateFirmware(System.String,Zebra.Sdk.Card.Printer.CardFirmwareUpdateHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.HasMagneticEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetPrintCapability">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.HasLaminator">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.HasSmartCardEncoder">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAvailableSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Cancel(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.EjectCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobList">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.PositionCard">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.MagEncode(System.Int32,System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Print(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.PrintTemplate(System.Int32,Zebra.Sdk.Card.Containers.TemplateJob)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.PrintAndMagEncode(System.Int32,System.Collections.Generic.List{Zebra.Sdk.Card.Containers.GraphicsInfo},System.String,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ReadMagData(Zebra.Sdk.Card.Enumerations.DataSource,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Reprint(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Resume">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SmartCardEncode(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Destroy">
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAllJobSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAllJobSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetJobSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.SetJobSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsJobSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsJobSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsJobSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetJobSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ClearError">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ClearRejectBinCounter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAvailableCardTypes">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetCardTypeInformation(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetAvailableMemory">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLog(Zebra.Sdk.Card.Enumerations.LogType,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetWirelessRadioStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetWirelessStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ScanWirelessAccessPoints(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ResumeFromStandby">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.HasBarcodeReader">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsHostAuthenticationEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.IsEncryptionEnabled">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ResetNetwork">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Abort(System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.Reject">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetReservationStatus(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ReleaseDeviceReservation(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ReserveDevice(Zebra.Sdk.Card.Enumerations.ReservationType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.ReadBarcodeData">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.RetrySmartCard(Zebra.Sdk.Card.Enumerations.SmartCardType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.PrintTestCard(System.Byte,System.Int32,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetTestPrintImageNames">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.PrintTestCard(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.CalibrateLaminate">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorCardCount">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorInformation">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorSensorStates">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorSensorValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.RestoreLaminatorDefaultConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifPrinterImpl.GetLaminatorOdometerValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Printer.Internal.ZmotifZebraPrinter.#ctor(Zebra.Sdk.Comm.Connection)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.CustomCardUtil.PopulateCustomCardInfo(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting},System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.MagEncoderParametersUtil.BuildMagOffsetsMap(Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.NetworkParametersUtil.PopulateNetworkInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.NetworkParametersUtil.BuildNetworkParametersMap(Zebra.Sdk.Card.Containers.NetworkInfo)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.WirelessParametersUtil.BuildWirelessParametersDictionary(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.WirelessParametersUtil.PopulateWirelessNetworkInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.WirelessParametersUtil.BuildWirelessParametersMap(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.#ctor(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Card.Zmotif.Comm.Internal.ZMTPrn,Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.ReadSettingsLut">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetAvailableSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.SetSettingValues(System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettings(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.ConfigureSettings(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.ConfigureWiredNetworkSettings">
            <summary>
            Change Jaguar wired network settings access from 'R' to 'RW'
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingById(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.RefreshSettings(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.UpdateInternalState(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.CheckSettingsList(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.MergeSettingsGroup(System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.HashSet{System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.SendConfiguration(System.String,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetGroupSettingNames(System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.AddGroupSettings(System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.GetSettingGroupPrefix(System.String)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsGroupSetting(System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsCalLutSetting(System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.IsCustomCardSetting(System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.HasLaminatorSettings(System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.HasNetworkSettings(System.String)">
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettings.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetHeadResistance">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetHeadResistance(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetNetworkParameters">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCleaningInterval(Zebra.Sdk.Card.Enumerations.CleaningPath)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetNetworkParameters(Zebra.Sdk.Card.Containers.NetworkInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetCleaningInterval(Zebra.Sdk.Card.Enumerations.CleaningPath,System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetSmartCardOffset">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetSmartCardOffset(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetContactlessSmartCardOffset(System.String,System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetContactlessSmartCardOffset(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetMagneticEncoderOffsets">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetMagneticEncoderOffsets(Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetConfiguration">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetConfiguration(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetWirelessParameters">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetWirelessParameters(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetPanelPowerLevel(Zebra.Sdk.Card.Enumerations.PanelType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetPanelPowerLevel(Zebra.Sdk.Card.Enumerations.PanelType,System.Byte)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetOcpParameters">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetOcpParameters(Zebra.Sdk.Card.Containers.OcpSettings)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetTransferTemperatureOffset(Zebra.Sdk.Card.Enumerations.TransferTemperatureType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetTransferTemperatureOffset(Zebra.Sdk.Card.Enumerations.TransferTemperatureType,System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCustomCardConfiguration(Zebra.Sdk.Card.Enumerations.CustomCard)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetCustomCardConfiguration(Zebra.Sdk.Card.Containers.CardTypeInfo)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetErrorControlLevel">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetErrorControlLevel(Zebra.Sdk.Card.Enumerations.ErrorControlLevel)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetStandbyTimeout">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetStandbyTimeout(Zebra.Sdk.Card.Enumerations.Timeout)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCapabilities(Zebra.Sdk.Card.Enumerations.CapabilitiesType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetCleanWarningThreshold(System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCleanWarningThreshold">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetActiveLUTTable(Zebra.Sdk.Card.Enumerations.CalibrationTable)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetActiveLUTTable">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.LoadCalibrationTableData(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCalibrationTableData(Zebra.Sdk.Card.Enumerations.CalibrationTable)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetCalibrationTableNames">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetImageTransferType">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.GetLaminatorOffset(Zebra.Sdk.Card.Enumerations.LaminatorOffsetType)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SetLaminatorOffset(Zebra.Sdk.Card.Enumerations.LaminatorOffsetType,System.Int32)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.ThrowOnZCSeriesPrinterModel(Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.ATOMIC_OPERATION">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.Internal.ZmotifSettingsHelperImpl.SYMBOLIC_LOCK">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif">
            <summary>
            Interface for settings related tasks and information.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetHeadResistance">
            <summary>
            Returns the printhead resistance value.
            </summary>
            <returns>The head resistance value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the head resistance.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetHeadResistance(System.Int32)">
            <summary>
            Sets the printhead resistance value.
            </summary>
            <param name="headResistance">The printhead resistance value.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>headResistance</c> value is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetNetworkParameters">
            <summary>
            Returns the printer's network information.
            </summary>
            <returns>The printer's wired network configuration.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the network parameters.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCleaningInterval(Zebra.Sdk.Card.Enumerations.CleaningPath)">
            <summary>
            Returns the cleaning interval for the specified <c>path</c>.
            </summary>
            <param name="path">The cleaning path.</param>
            <returns>The cleaning interval value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the cleaning interval.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetCleaningInterval(Zebra.Sdk.Card.Enumerations.CleaningPath,System.Int32)">
            <summary>
            Sets the the cleaning interval for the specified <c>path</c>.
            </summary>
            <param name="path">The cleaning path.</param>
            <param name="interval">The number of cards printed before the clean path warning appears.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>path</c> or <c>interval</c> values are invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetSmartCardOffset">
            <summary>
            Returns the smart card offset value.
            </summary>
            <returns>The smart card offset value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the smart card offset.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetSmartCardOffset(System.Int32)">
            <summary>
            Sets the contact smart card encoding position offset value.
            </summary>
            <param name="offset">The contact smart card encoding position offset.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetContactlessSmartCardOffset(System.String,System.Int32)">
            <summary>
            Sets the contactless smart card encoding position offset value.
            </summary>
            <param name="encoderType">The contactless encoder type (mifare, uhf, hf, lf, other).</param>
            <param name="offset">The contactless smart card encoding position offset.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetContactlessSmartCardOffset(System.String)">
            <summary>
            Returns the offset value for the specified contactless smart card encoder type.
            </summary>
            <param name="encoderType">The contactless encoder type (mifare, uhf, hf, lf, other).</param>
            <returns>The contactless smart card offset value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the encoder type is not valid or an error occurs while retrieving the smart card offset.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetMagneticEncoderOffsets">
            <summary>
            Returns the magnetic encoder offset values.
            </summary>
            <returns>The magnetic encoder offset values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the magnetic encoder offsets.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer does not have a magnetic encoder.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetMagneticEncoderOffsets(Zebra.Sdk.Card.Containers.MagneticEncoderOffsetInfo)">
            <summary>
            Sets the magnetic encoder offsets values.
            </summary>
            <param name="offsets">The magnetic encoder offset values.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while setting the encoder offsets.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetConfiguration">
            <summary>
            Returns the configuration of the printer.
            </summary>
            <returns>The printer configuration in xml format.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while retrieving the configuration.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetConfiguration(System.String)">
            <summary>
            Sets the configuration of the printer.
            </summary>
            <param name="xmlConfiguration">Printer configuration xml document.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while setting the XML configuration.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the <c>xmlConfiguration</c> is invalid or an error occurs while setting the configuration.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetWirelessParameters">
            <summary>
            Returns the printer's wireless network information.
            </summary>
            <returns>The printer's wireless network information.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the wireless parameters.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetWirelessParameters(Zebra.Sdk.Card.Containers.WirelessNetworkInfo)">
            <summary>
            Sets the printer's wireless network information.
            </summary>
            <param name="netInfo">WirelessNetworkInfo object containing the wireless network information.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetPanelPowerLevel(Zebra.Sdk.Card.Enumerations.PanelType)">
            <summary>
            Returns the power level of the specific <c>panel</c>.
            </summary>
            <param name="panel">The ribbon panel.</param>
            <returns>The ribbon panel power level and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>panel</c> is invalid or an error occurs while retrieving the panel power level.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetPanelPowerLevel(Zebra.Sdk.Card.Enumerations.PanelType,System.Byte)">
            <summary>
            Sets the specificed ribbon panel's power level.
            </summary>
            <param name="panel">The ribbon panel.</param>
            <param name="powerLevel">The power level for the specified panel.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetOcpParameters">
            <summary>
            Returns the printer's OCP configuration.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <returns>The configuration of the OCP.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the OCP configuration.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetOcpParameters(Zebra.Sdk.Card.Containers.OcpSettings)">
            <summary>
            Sets the printers OCP configuration.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="ocpParams">The configuration of the OCP.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetTransferTemperatureOffset(Zebra.Sdk.Card.Enumerations.TransferTemperatureType)">
            <summary>
            Returns the transfer temperature offset value for the specified sensor.
            </summary>
            <remarks>For ZMotif Series re-transfer printers only.</remarks>
            <param name="type">The transfer temperature sensor.</param>
            <returns>The transfer temperature value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>type</c> is invalid or an error occurs while retrieving the transfer temperature value.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetTransferTemperatureOffset(Zebra.Sdk.Card.Enumerations.TransferTemperatureType,System.Int32)">
            <summary>
            Sets the transfer temperature offset value for the specified sensor.
            </summary>
            <param name="type">The transfer temperature sensor.</param>
            <param name="offset">The transfer temperature offset value.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCustomCardConfiguration(Zebra.Sdk.Card.Enumerations.CustomCard)">
            <summary>
            Returns the configuration of the specified custom card.
            </summary>
            <param name="card">The <c>CustomCard</c> type to use.</param>
            <returns>The custom card configuration.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the card configuration.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetCustomCardConfiguration(Zebra.Sdk.Card.Containers.CardTypeInfo)">
            <summary>
            Sets the custom card configuration.
            </summary>
            <param name="cardInfo">The configuration values for the custom card.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetErrorControlLevel">
            <summary>
            Returns the printer's current error control handling mode.
            </summary>
            <returns>The error control level.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the error control level.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetErrorControlLevel(Zebra.Sdk.Card.Enumerations.ErrorControlLevel)">
            <summary>
            Sets the printer's error control handling mode.
            </summary>
            <param name="level">The error control level.</param>  
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetStandbyTimeout">
            <summary>
            Returns the printer's current standby timeout value.
            </summary>
            <returns>The standby timeout value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the standby timeout.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCapabilities(Zebra.Sdk.Card.Enumerations.CapabilitiesType)">
            <summary>
            Returns the specified capabilities of the printer.
            </summary>
            <param name="reportType">The capabilitites type.</param>
            <returns>Capabliltites in xml format.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs processing the capabilities data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If an error occurs while retrieving the capabilities.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetStandbyTimeout(Zebra.Sdk.Card.Enumerations.Timeout)">
            <summary>
            Sets the printer's standby timeout value.
            </summary>
            <param name="timeout">The standby timeout.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetCleanWarningThreshold(System.Int32)">
            <summary>
            Sets the clean warning threshold of the printer.
            </summary>
            <param name="threshold">The number of cards printed before the clean warning appears on the printer.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCleanWarningThreshold">
            <summary>
            Returns the clean printer warning threshold.
            </summary>
            <returns>The clean warning threshold value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the cleaning warning threshold.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetActiveLUTTable(Zebra.Sdk.Card.Enumerations.CalibrationTable)">
            <summary>
            Sets the calibration table to be used by the printer.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="table">The calibration table to use.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetActiveLUTTable">
            <summary>
            Returns the active calibration table identifier.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <returns>The active calibration table.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the active LUT table.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or if an error occurs while retrieving the calibration table.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.LoadCalibrationTableData(System.String)">
            <summary>
            Loads the calibration table data to the printer.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="xmlCalibrationData">The calibration data in xml format.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>xmlCalibrationData</c> is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or if a printer error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetNetworkParameters(Zebra.Sdk.Card.Containers.NetworkInfo)">
            <summary>
            Sets the printer's network configuration information.
            </summary>
            <param name="netInfo">The network configuration.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist, is invalid, the device is busy, or there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCalibrationTableData(Zebra.Sdk.Card.Enumerations.CalibrationTable)">
            <summary>
            Returns the specified calibration table data.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <param name="table">The calibration table to retrieve.</param>
            <returns>The calibration data in xml format.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs processing the calibration data.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or if an error occurs while retrieving the calibration table.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetCalibrationTableNames">
            <summary>
            Returns the stored calibration table names and data.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
            <returns>A <c>Dictionary</c> containing the stored calibration table names and data.</returns>
            <ul>
            <li>Key = The calibration table name.</li>
            <li>Value = The calibration table data.</li>
            </ul>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while processing the calibration table names.</exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException">If the printer model is not supported or if an error occurs while retrieving the calibration table names.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetImageTransferType">
            <summary>
            Returns the printer's image transfer type.
            </summary>
            <returns>The transfer type of the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If an error occurs while retrieving the image transfer type.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.GetLaminatorOffset(Zebra.Sdk.Card.Enumerations.LaminatorOffsetType)">
            <summary>
            Returns the specified laminator offset value.
            </summary>
            <param name="type">The offset type.</param>
            <returns>The laminator offset value and range.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the <c>type</c> is invalid or an error occurs while retrieving the laminator offset.</exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Settings.SettingsHelperUtilZmotif.SetLaminatorOffset(Zebra.Sdk.Card.Enumerations.LaminatorOffsetType,System.Int32)">
            <summary>
            Sets the sepcified laminator offset value.
            </summary>
            <param name="type">The offset type to set.</param>
            <param name="value">The offset value.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the device is busy or there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist or is invalid.</exception>
        </member>
        <member name="T:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif">
            <summary>
            Container class for ZMotif Series card printer device parameter key names.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLOCK_MONTH">
            <summary>
            Clock month.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLOCK_DAY">
            <summary>
            Clock day.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLOCK_YEAR">
            <summary>
            Clock year.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLOCK_HOUR">
            <summary>
            Clock hour.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLOCK_MINUTE">
            <summary>
            Clock minute.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_MAC">
            <summary>
            Wireless MAC address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRED_SNMP">
            <summary>
            Wired SNMP enabled.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRED_DNS_NAME">
            <summary>
            Wired DNS name.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRED_IPV6_ADDRESS">
            <summary>
            Wired IPV6 IP address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.DEFAULT_WIRED_ADDRESS">
            <summary>
            Default wired IP address.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.DEFAULT_WIRED_SUBNET">
            <summary>
            Default wired Subnet mask.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.DEFAULT_WIRED_GATEWAY">
            <summary>
            Default wired Gateway address.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_SNMP">
            <summary>
            Wireless SNMP enabled.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_DHCP">
            <summary>
            Wireless DHCP enabled.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_ADDRESS">
            <summary>
            Wireless IP address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_SUBNET">
            <summary>
            Wireless Subnet mask.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_GATEWAY">
            <summary>
            Wireless Gateway address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_BSSID">
            <summary>
            Wireless BSSID.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_CHANNEL">
            <summary>
            Wireless channel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_COUNTRY">
            <summary>
            Wireless country.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_CRYPTO">
            <summary>
            Wireless cryptographic security type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_RADIO">
            <summary>
            Wireless radio enabled.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_SECURITY">
            <summary>
            Wireless security type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_SSID">
            <summary>
            Wireless SSID name.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.WIRELESS_KEY">
            <summary>
            Wireless security key.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USB_READ_TIMEOUT">
            <summary>
            USB read operation timeout.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USB_WRITE_TIMEOUT">
            <summary>
            USB write operation timeout.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USB_SPEED">
            <summary>
            USB speed.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.PRINTER_SPEED">
            <summary>
            Printer speed.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.OCP_LANGUAGE_TYPE">
            <summary>
            OCP language type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.OCP_LANGUAGE_NAME">
            <summary>
            OCP language name.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.ERROR_CONTROL_LEVEL">
            <summary>
            Error control level.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_FEEDER_MODE">
            <summary>
            Card feeder mode.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.KIOSK_MODE">
            <summary>
            Kiosk mode.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TOTAL_LINES_PRINTED">
            <summary>
            Total lines printed.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TOTAL_PRINT_PASSES_COMPLETED">
            <summary>
            Total print passes completed.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.STANDBY_TIMEOUT">
            <summary>
            Standby timeout.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_YELLOW">
            <summary>
            Manufacturing yellow panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_MAGENTA">
            <summary>
            Manufacturing magenta panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_CYAN">
            <summary>
            Manufacturing cyan panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_KRESIN_FRONT">
            <summary>
            Manufacturing k-resin panel power adjustment front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_KRESIN_BACK">
            <summary>
            Manufacturing k-resin panel power adjustment back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_KDYE">
            <summary>
            Manufacturing k-dye panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_OVERLAY">
            <summary>
            Manufacturing overlay panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_UV_FRONT">
            <summary>
            Manufacturing uv panel power adjustment front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_UV_BACK">
            <summary>
            Manufacturing uv panel power adjustment back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_INHIBIT">
            <summary>
            Manufacturing inhibit panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_HELPER">
            <summary>
            Manufacturing helper panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PANEL_POWER_ADJ_X_RESIN">
            <summary>
            Manufacturing x-resin panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_YELLOW">
            <summary>
            User yellow panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_MAGENTA">
            <summary>
            User magenta panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_CYAN">
            <summary>
            User cyan panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_KRESIN_FRONT">
            <summary>
            User k-resin panel power adjustment front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_KRESIN_BACK">
            <summary>
            User k-resin panel power adjustment back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_KDYE">
            <summary>
            User k-dye panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_OVERLAY">
            <summary>
            User overlay panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_UV_FRONT">
            <summary>
            User uv panel power adjustment front.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_UV_BACK">
            <summary>
            User uv panel power adjustment back.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_INHIBIT">
            <summary>
            User inhibit panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_HELPER">
            <summary>
            User helper panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PANEL_POWER_ADJ_X_RESIN">
            <summary>
            User x-resin panel power adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRICOLOR_RED">
            <summary>
            Tricolor red sensor.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRICOLOR_GREEN">
            <summary>
            Tricolor green sensor.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRICOLOR_BLUE">
            <summary>
            Tricolor blue sensor.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRICOLOR_CLEAR_TO_COLOR">
            <summary>
            Tricolor clear to color sensor.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_S0">
            <summary>
            Ribbon motor takeup S0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_K0">
            <summary>
            Ribbon motor takeup K0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_KB">
            <summary>
            Ribbon motor takeup KB.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_KA">
            <summary>
            Ribbon motor takeup KA.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_M0">
            <summary>
            Ribbon motor takeup M0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_MB">
            <summary>
            Ribbon motor takeup MB.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_MA">
            <summary>
            Ribbon motor takeup MA.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_MOTOR_TAKEUP_VTOI">
            <summary>
            Ribbon motor takeup VtoI.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_SENSOR_OFFSET">
            <summary>
            Ribbon sensor offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.BEMF_POTENTIOMETER">
            <summary>
            BEMF potentiometer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full YMC pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty YMC pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full YMC print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty YMC print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full YMC post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty YMC post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_TAKEUP_IDLE">
            <summary>
            Ribbon YMC idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_YMC_PAYOUT_IDLE">
            <summary>
            Ribbon YMC idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full Monochrome pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty Monochrome pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full Monochrome print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty Monochrome print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full Monochrome post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty Monochrome post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_TAKEUP_IDLE">
            <summary>
            Ribbon Monochrome idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_K_PAYOUT_IDLE">
            <summary>
            Ribbon Monochrome idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full UV pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty UV pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full UV print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty UV print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full UV post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty UV post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_TAKEUP_IDLE">
            <summary>
            Ribbon UV idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_UV_PAYOUT_IDLE">
            <summary>
            Ribbon UV idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full Inhibit pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty Inhibit pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full Inhibit print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty Inhibit print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full Inhibit print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty Inhibit print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_TAKEUP_IDLE">
            <summary>
            Ribbon Inhibit idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_I_PAYOUT_IDLE">
            <summary>
            Ribbon Inhibit idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full Overlay pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty Overlay pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full Overlay print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty Overlay print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full Overlay post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty Overlay post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_TAKEUP_IDLE">
            <summary>
            Ribbon Overlay idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_O_PAYOUT_IDLE">
            <summary>
            Ribbon Overlay idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_PREPRINT_FULL">
            <summary>
            Ribbon full Helper pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_PREPRINT_EMPTY">
            <summary>
            Ribbon empty Helper pre-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_PRINT_FULL">
            <summary>
            Ribbon full Helper print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_PRINT_EMPTY">
            <summary>
            Ribbon empty Helper print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_POSTPRINT_FULL">
            <summary>
            Ribbon full Helper post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_POSTPRINT_EMPTY">
            <summary>
            Ribbon empty Helper post-print takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_TAKEUP_IDLE">
            <summary>
            Ribbon Helper idle takeup tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_TENSION_H_PAYOUT_IDLE">
            <summary>
            Ribbon Helper idle payout tension.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_PRINT_X_OFFSET">
            <summary>
            Film print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_PRINT_Y_OFFSET">
            <summary>
            Film print y-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_TRANSFER_START_OFFSET">
            <summary>
            Film transfer start offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.SMARTCARD_MIFARE_X_OFFSET">
            <summary>
            Smart card contactless encoder x-offset.
            </summary>
            <remarks>For ZMotif Series 7, 8, and 9 printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.SMARTCARD_LF_X_OFFSET">
            <summary>
            Smart card LF encoder x-offset.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.SMARTCARD_HF_X_OFFSET">
            <summary>
            Smart card HF encoder x-offset.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.SMARTCARD_UHF_X_OFFSET">
            <summary>
            Smart card UHF encoder x-offset.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_CENTER_X_OFFSET">
            <summary>
            Card center x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_CENTER_Y_OFFSET">
            <summary>
            Card center y-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_TRANSFER_START_Y_OFFSET">
            <summary>
            Card transfer start y-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_TRANSFER_END_Y_OFFSET">
            <summary>
            Card transfer end y-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_TRANSFER_ROLL_Y_OFFSET">
            <summary>
            Card transfer roll y-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_END_ROLL_TRANSFER_OFFSET">
            <summary>
            Film end roll transfer offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_EXTRA_TRANSFER_TAKEUP_MOVE">
            <summary>
            Film extra transfer takeup move.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FLUX_CORRECTION">
            <summary>
            Flux correction.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FLIPPER_SENSOR_OFFSET">
            <summary>
            Flipper sensor offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.PLATEN_TEMPERATURE_OFFSET">
            <summary>
            Platen temperature offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MFG_PRINT_SPEED_ADJUST">
            <summary>
            Manufacturing print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.USER_PRINT_SPEED_ADJUST">
            <summary>
            User print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAG_ENCODE_SPEED_ADJUST">
            <summary>
            Magnetic encode speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.YELLOW_SPEED_ADJUST">
            <summary>
            Yellow print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAGENTA_SPEED_ADJUST">
            <summary>
            Magenta print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CYAN_SPEED_ADJUST">
            <summary>
            Cyan print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.K_COLOR_SPEED_ADJUST">
            <summary>
            K-color print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.K_MONO_SPEED_ADJUST">
            <summary>
            K-mono print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.OVERLAY_SPEED_ADJUST">
            <summary>
            Overlay print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.UV_SPEED_ADJUST">
            <summary>
            UV print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MONOX_SPEED_ADJUST">
            <summary>
            Monox print speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.YELLOW_X_OFFSET">
            <summary>
            Yellow print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAGENTA_X_OFFSET">
            <summary>
            Magenta print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CYAN_X_OFFSET">
            <summary>
            Cyan print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.K_COLOR_X_OFFSET">
            <summary>
            K-color print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.K_MONO_X_OFFSET">
            <summary>
            K-mono print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.OVERLAY_X_OFFSET">
            <summary>
            Overlay print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.UV_X_OFFSET">
            <summary>
            UV print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MONOX_X_OFFSET">
            <summary>
            MONOX print x-offset.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_TYPE">
            <summary>
            Film type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_DESCRIPTION">
            <summary>
            Film description.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_OEM">
            <summary>
            Film OEM code.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_INITIAL_SIZE">
            <summary>
            Film initial size.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.FILM_PANELS_REMAINING">
            <summary>
            Film panels remaining.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_1">
            <summary>
            Custom card 1 prefix.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_2">
            <summary>
            Custom card 2 prefix.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_COERCIVITY">
            <summary>
            Custom card coercivity information.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_CONTACT_ENCODE">
            <summary>
            Custom card contact smartcard information.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_CONTACTLESS_ENCODE">
            <summary>
            Custom card contactless smartcard information.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_DESCRIPTION">
            <summary>
            Custom card description.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_MAG_STRIPE">
            <summary>
            Custom card magnetic stripe information.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_THICKNESS">
            <summary>
            Custom card thickness.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_TYPE">
            <summary>
            Custom card type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CARD_PART_NUMBER">
            <summary>
            Custom card part number.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_TEMP_TOP_SINGLE">
            <summary>
            Custom card transfer temperature top single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_TEMP_BOTTOM_SINGLE">
            <summary>
            Custom card transfer temperature bottom single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_TEMP_TOP_DOUBLE">
            <summary>
            Custom card transfer temperature top double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_TEMP_BOTTOM_DOUBLE">
            <summary>
            Custom card transfer temperature bottom double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_INPUT_SINGLE">
            <summary>
            Custom card transfer speed input single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_OUTPUT_SINGLE">
            <summary>
            Custom card transfer speed output single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_INPUT_DOUBLE">
            <summary>
            Custom card transfer speed input double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_OUTPUT_DOUBLE">
            <summary>
            Custom card transfer speed output double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_INPUT_SINGLE_UV">
            <summary>
            Custom card UV transfer speed input single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_OUTPUT_SINGLE_UV">
            <summary>
            Custom card UV transfer speed output single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_INPUT_DOUBLE_UV">
            <summary>
            Custom card UV transfer speed input double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_XFER_SPEED_OUTPUT_DOUBLE_UV">
            <summary>
            Custom card UV transfer speed output double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_LAM_ADJ_TOP_TEMP">
            <summary>
            Custom card laminator top temperature adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_LAM_ADJ_BOTTOM_TEMP">
            <summary>
            Custom card laminator bottom temperature adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CUSTOM_CARD_LAM_ADJ_SPEED">
            <summary>
            Custom card laminator speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TYPE">
            <summary>
            Transfer type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_TOP_SINGLE">
            <summary>
            Transfer top temperature single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_BOTTOM_SINGLE">
            <summary>
            Transfer bottom temperature single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_TOP_DOUBLE">
            <summary>
            Transfer top temperature double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_BOTTOM_DOUBLE">
            <summary>
            Transfer bottom temperature double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_TOP_SINGLE_OFFSET">
            <summary>
            Transfer top temperature offset single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_BOTTOM_SINGLE_OFFSET">
            <summary>
            Transfer bottom temperature offset single sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_TOP_DOUBLE_OFFSET">
            <summary>
            Transfer top temperature offset double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TEMPERATURE_BOTTOM_DOUBLE_OFFSET">
            <summary>
            Transfer bottom temperature offset double sided.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TOP_TEMPERATURE_CALIBRATION">
            <summary>
            Transfer top temperature calibration.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_BOTTOM_TEMPERATURE_CALIBRATION">
            <summary>
            Transfer bottom temperature calibration.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_TOP_TEMPERATURE_TILT">
            <summary>
            Transfer top temperature tilt.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.TRANSFER_BOTTOM_TEMPERATURE_TILT">
            <summary>
            Transfer bottom temperature tilt.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_Y_CARD_PATH">
            <summary>
            Clean y-direction card path threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_TRANSFER_ROLLERS">
            <summary>
            Clean transfer rollers threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_LAMINATOR_X_CARD_PATH">
            <summary>
            Clean laminator x-direction card path threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_LAMINATOR_HEATED_ROLLERS">
            <summary>
            Clean laminator heated rollers threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_PRINTHEAD_LAPPING_ENABLE">
            <summary>
            Clean printhead lapping enabled threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_PRINTHEAD_LAPPING">
            <summary>
            Clean printhead lapping threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_PRE_WARNING_THRESHOLD">
            <summary>
            Clean pre-warning threshold.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_DEADLINE_ENFORCEMENT">
            <summary>
            Clean printer deadline enforcment level.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CLEAN_ALCOHOL_CARD_THRESHOLD">
            <summary>
            Clean with alcohol card threshold level.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_PATCH_LEN">
            <summary>
            Laminate patch length adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_COARSE_X_OFFSET">
            <summary>
            Laminate coarse x-offset adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_SPEED">
            <summary>
            Laminate speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_PASSTHRU_SPEED">
            <summary>
            Laminate pass-thru speed adjustment.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_TYPE">
            <summary>
            Laminate type top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_DESCRIPTION">
            <summary>
            Laminate description top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_THICKNESS">
            <summary>
            Laminate thickness top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_WIDTH">
            <summary>
            Laminate width top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_REGISTRATION">
            <summary>
            Laminate registration top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_OEM">
            <summary>
            Laminate OEM top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_INITIAL_SIZE">
            <summary>
            Laminate initial size top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_TOP_PANELS_REMAINING">
            <summary>
            Laminate panels remaining top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_TOP_X_FINE_OFFSET">
            <summary>
            Laminate fine x-offset adjustment top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_TOP_TEMP">
            <summary>
            Laminate temperature adjustment top.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_TYPE">
            <summary>
            Laminate type bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_DESCRIPTION">
            <summary>
            Laminate description bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_THICKNESS">
            <summary>
            Laminate thickness bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_WIDTH">
            <summary>
            Laminate width bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_REGISTRATION">
            <summary>
            Laminate registration bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_OEM">
            <summary>
            Laminate OEM bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_INITIAL_SIZE">
            <summary>
            Laminate initial size bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_BOTTOM_PANELS_REMAINING">
            <summary>
            Laminate panels remaining bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_BOTTOM_X_FINE_OFFSET">
            <summary>
            Laminate fine x-offset adjustment bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LAMINATE_ADJ_BOTTOM_TEMP">
            <summary>
            Laminate temperature adjustment bottom.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_CHANNEL">
            <summary>
            Internal encoder communication channel.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_VENDOR_ID">
            <summary>
            Internal smartcard encoder vendor id.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_PRODUCT_ID">
            <summary>
            Internal smartcard product id.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_DEVICE_CLASS">
            <summary>
            Internal smartcard encoder device class.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_MANUFACTURER">
            <summary>
            Internal smartcard encoder manufacturer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.INTERNAL_ENCODER_PRODUCT">
            <summary>
            Internal smartcard encoder product.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAG_TRACK_1_START_SENTINEL_CORRECTION">
            <summary>
            Mag track 1 start sentinel correction.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAG_TRACK_2_START_SENTINEL_CORRECTION">
            <summary>
            Mag track 2 start sentinel correction.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAG_TRACK_3_START_SENTINEL_CORRECTION">
            <summary>
            Mag track 3 start sentinel correction.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.MAG_ERASE">
            <summary>
            Magnetic encoding verification.
            Only for ZC printer models    
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.RIBBON_SYNCH_ENABLE">
            <summary>
            Enable ribbon synchronization on power up and door closing.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CAL_LUT_1">
            <summary>
            Calibration LUT 1 prefix.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CAL_LUT_2">
            <summary>
            Calibration LUT 2 prefix.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CAL_LUT_TYPE">
            <summary>
            Calibration LUT type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CAL_LUT_DEFAULT_NAME">
            <summary>
            Calibration LUT default name.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.CAL_LUT_CURRENT_NAME">
            <summary>
            Calibration LUT current name.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.ACTIVE_LUT">
            <summary>
            Active LUT.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Card.Zmotif.Settings.ZebraCardSettingNamesZmotif.LCD_DISPLAY_AVAILABLE">
            <summary>
            Indicates whether or not the printer has a display panel.
            </summary>
            <remarks>For ZC Series printers only.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildOcpDisplay(Zebra.Sdk.Card.Containers.OcpDisplayInfo,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildDeviceControlCmd(Zebra.Sdk.Card.Zmotif.Enumerations.Internal.ZMCDeviceCntrlType,System.String,System.Int32)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildConfigurationXml(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildXmlFromMap(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildJobControl(Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildJobControl(System.String,Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl)">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildCardElement(Zebra.Sdk.Card.Zmotif.Job.Internal.CardVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildSideElement(Zebra.Sdk.Card.Zmotif.Job.Internal.SideVariables,Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildPrintElement(Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildGraphicElement(Zebra.Sdk.Card.Zmotif.Job.Internal.GraphicVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildSmartCardElement(Zebra.Sdk.Card.Zmotif.Job.Internal.SmartCardVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.BuildMagElement(Zebra.Sdk.Card.Zmotif.Job.Internal.MagVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddOrientation(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.SideVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddRotation(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.SideVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddSharpness(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.SideVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddKOptimizationMode(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.SideVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddPreheat(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddFill(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables,System.Boolean)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddUse(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.GetFillAttributeName(System.Int32)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddPlacement(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddOverprint(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddObscure(System.Xml.Linq.XElement,Zebra.Sdk.Card.Zmotif.Job.Internal.PrintVariables)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlBuilder.AddDelayNetworkResetElement(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlExtension.GetUniquePath(System.Xml.Linq.XElement)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlExtension.IndexPosition(System.Xml.Linq.XElement)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl.BuildCardVariables(System.Int32,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlJobControl.BuildSideVariables(Zebra.Sdk.Card.Enumerations.CardSide,System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.BuildMapFromXmlDocument(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.XmlTreeWalk(System.String,System.Xml.Linq.XElement,System.Collections.Specialized.OrderedDictionary@)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.BuildSettingsLutMap(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.SettingsLutTreeWalk(System.String,System.Xml.Linq.XElement,System.Collections.Specialized.OrderedDictionary@)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.BuildSettingsMap(System.String,System.Collections.Specialized.OrderedDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ConfigurationTreeWalk(System.String,System.Xml.Linq.XElement,System.Collections.Specialized.OrderedDictionary@,System.Collections.Specialized.OrderedDictionary@)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseConfigXmlNodeAttributes(System.Xml.Linq.XElement,Zebra.Sdk.Settings.Setting@)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.BuildJobControlSettingsMap(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.JobSettingsTreeWalk(System.String,System.Xml.Linq.XElement,System.Collections.Specialized.OrderedDictionary@)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseJobSettingsNodeAttributes(System.Xml.Linq.XElement,Zebra.Sdk.Settings.Setting@)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.HasAccessPointEntry(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseAccessPoints(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseAccessPoint(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseMemory(System.String,Zebra.Sdk.Card.Containers.MemoryInfo)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseGeneralStatus(System.String,Zebra.Sdk.Card.Zmotif.Comm.Internal.CommandHelperUtil.GeneralStatusInfo@)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseOcpDisplay(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseCards(System.String,System.Collections.Generic.List{System.String},Zebra.Sdk.Card.Zmotif.Job.Internal.ZmotifJobVariables.AvailableCards[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseCardInformation(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseJobList(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseGetData(System.String,System.Int32,Zebra.Sdk.Card.Enumerations.DataSource,Zebra.Sdk.Card.Comm.Internal.CardError)">
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:Zebra.Sdk.Card.Exceptions.ZebraCardException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ParseNonce(System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Card.Zmotif.Xml.Internal.XmlParser.ContainsElement(System.String,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
    </members>
</doc>
